# coding: utf-8

"""
    Artifacts API

     Artifacts is an API-based MMO game where you can manage 5 characters to explore, fight, gather resources, craft items and much more.  Website: https://artifactsmmo.com/  Documentation: https://docs.artifactsmmo.com/  OpenAPI Spec: https://api.artifactsmmo.com/openapi.json   # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class MyCharactersApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def action_accept_new_task_my_name_action_task_new_post(self, name, **kwargs):  # noqa: E501
        """Action Accept New Task  # noqa: E501

        Accepting a new task.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.action_accept_new_task_my_name_action_task_new_post(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object name: Name of your character. (required)
        :return: TaskResponseSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.action_accept_new_task_my_name_action_task_new_post_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.action_accept_new_task_my_name_action_task_new_post_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def action_accept_new_task_my_name_action_task_new_post_with_http_info(self, name, **kwargs):  # noqa: E501
        """Action Accept New Task  # noqa: E501

        Accepting a new task.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.action_accept_new_task_my_name_action_task_new_post_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object name: Name of your character. (required)
        :return: TaskResponseSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method action_accept_new_task_my_name_action_task_new_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `action_accept_new_task_my_name_action_task_new_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTBearer']  # noqa: E501

        return self.api_client.call_api(
            '/my/{name}/action/task/new', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskResponseSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def action_buy_bank_expansion_my_name_action_bank_buy_expansion_post(self, name, **kwargs):  # noqa: E501
        """Action Buy Bank Expansion  # noqa: E501

        Buy a 20 slots bank expansion.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.action_buy_bank_expansion_my_name_action_bank_buy_expansion_post(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object name: Name of your character. (required)
        :return: BankExtensionTransactionResponseSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.action_buy_bank_expansion_my_name_action_bank_buy_expansion_post_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.action_buy_bank_expansion_my_name_action_bank_buy_expansion_post_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def action_buy_bank_expansion_my_name_action_bank_buy_expansion_post_with_http_info(self, name, **kwargs):  # noqa: E501
        """Action Buy Bank Expansion  # noqa: E501

        Buy a 20 slots bank expansion.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.action_buy_bank_expansion_my_name_action_bank_buy_expansion_post_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object name: Name of your character. (required)
        :return: BankExtensionTransactionResponseSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method action_buy_bank_expansion_my_name_action_bank_buy_expansion_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `action_buy_bank_expansion_my_name_action_bank_buy_expansion_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTBearer']  # noqa: E501

        return self.api_client.call_api(
            '/my/{name}/action/bank/buy_expansion', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BankExtensionTransactionResponseSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def action_complete_task_my_name_action_task_complete_post(self, name, **kwargs):  # noqa: E501
        """Action Complete Task  # noqa: E501

        Complete a task.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.action_complete_task_my_name_action_task_complete_post(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object name: Name of your character. (required)
        :return: TaskRewardResponseSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.action_complete_task_my_name_action_task_complete_post_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.action_complete_task_my_name_action_task_complete_post_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def action_complete_task_my_name_action_task_complete_post_with_http_info(self, name, **kwargs):  # noqa: E501
        """Action Complete Task  # noqa: E501

        Complete a task.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.action_complete_task_my_name_action_task_complete_post_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object name: Name of your character. (required)
        :return: TaskRewardResponseSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method action_complete_task_my_name_action_task_complete_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `action_complete_task_my_name_action_task_complete_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTBearer']  # noqa: E501

        return self.api_client.call_api(
            '/my/{name}/action/task/complete', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskRewardResponseSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def action_crafting_my_name_action_crafting_post(self, body, name, **kwargs):  # noqa: E501
        """Action Crafting  # noqa: E501

        Crafting an item. The character must be on a map with a workshop.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.action_crafting_my_name_action_crafting_post(body, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CraftingSchema body: (required)
        :param object name: Name of your character. (required)
        :return: SkillResponseSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.action_crafting_my_name_action_crafting_post_with_http_info(body, name, **kwargs)  # noqa: E501
        else:
            (data) = self.action_crafting_my_name_action_crafting_post_with_http_info(body, name, **kwargs)  # noqa: E501
            return data

    def action_crafting_my_name_action_crafting_post_with_http_info(self, body, name, **kwargs):  # noqa: E501
        """Action Crafting  # noqa: E501

        Crafting an item. The character must be on a map with a workshop.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.action_crafting_my_name_action_crafting_post_with_http_info(body, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CraftingSchema body: (required)
        :param object name: Name of your character. (required)
        :return: SkillResponseSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method action_crafting_my_name_action_crafting_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `action_crafting_my_name_action_crafting_post`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `action_crafting_my_name_action_crafting_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTBearer']  # noqa: E501

        return self.api_client.call_api(
            '/my/{name}/action/crafting', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SkillResponseSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def action_delete_item_my_name_action_delete_post(self, body, name, **kwargs):  # noqa: E501
        """Action Delete Item  # noqa: E501

        Delete an item from your character's inventory.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.action_delete_item_my_name_action_delete_post(body, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SimpleItemSchema body: (required)
        :param object name: Name of your character. (required)
        :return: DeleteItemResponseSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.action_delete_item_my_name_action_delete_post_with_http_info(body, name, **kwargs)  # noqa: E501
        else:
            (data) = self.action_delete_item_my_name_action_delete_post_with_http_info(body, name, **kwargs)  # noqa: E501
            return data

    def action_delete_item_my_name_action_delete_post_with_http_info(self, body, name, **kwargs):  # noqa: E501
        """Action Delete Item  # noqa: E501

        Delete an item from your character's inventory.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.action_delete_item_my_name_action_delete_post_with_http_info(body, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SimpleItemSchema body: (required)
        :param object name: Name of your character. (required)
        :return: DeleteItemResponseSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method action_delete_item_my_name_action_delete_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `action_delete_item_my_name_action_delete_post`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `action_delete_item_my_name_action_delete_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTBearer']  # noqa: E501

        return self.api_client.call_api(
            '/my/{name}/action/delete', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeleteItemResponseSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def action_deposit_bank_gold_my_name_action_bank_deposit_gold_post(self, body, name, **kwargs):  # noqa: E501
        """Action Deposit Bank Gold  # noqa: E501

        Deposit golds in a bank on the character's map.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.action_deposit_bank_gold_my_name_action_bank_deposit_gold_post(body, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DepositWithdrawGoldSchema body: (required)
        :param object name: Name of your character. (required)
        :return: BankGoldTransactionResponseSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.action_deposit_bank_gold_my_name_action_bank_deposit_gold_post_with_http_info(body, name, **kwargs)  # noqa: E501
        else:
            (data) = self.action_deposit_bank_gold_my_name_action_bank_deposit_gold_post_with_http_info(body, name, **kwargs)  # noqa: E501
            return data

    def action_deposit_bank_gold_my_name_action_bank_deposit_gold_post_with_http_info(self, body, name, **kwargs):  # noqa: E501
        """Action Deposit Bank Gold  # noqa: E501

        Deposit golds in a bank on the character's map.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.action_deposit_bank_gold_my_name_action_bank_deposit_gold_post_with_http_info(body, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DepositWithdrawGoldSchema body: (required)
        :param object name: Name of your character. (required)
        :return: BankGoldTransactionResponseSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method action_deposit_bank_gold_my_name_action_bank_deposit_gold_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `action_deposit_bank_gold_my_name_action_bank_deposit_gold_post`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `action_deposit_bank_gold_my_name_action_bank_deposit_gold_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTBearer']  # noqa: E501

        return self.api_client.call_api(
            '/my/{name}/action/bank/deposit/gold', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BankGoldTransactionResponseSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def action_deposit_bank_my_name_action_bank_deposit_post(self, body, name, **kwargs):  # noqa: E501
        """Action Deposit Bank  # noqa: E501

        Deposit an item in a bank on the character's map.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.action_deposit_bank_my_name_action_bank_deposit_post(body, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SimpleItemSchema body: (required)
        :param object name: Name of your character. (required)
        :return: BankItemTransactionResponseSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.action_deposit_bank_my_name_action_bank_deposit_post_with_http_info(body, name, **kwargs)  # noqa: E501
        else:
            (data) = self.action_deposit_bank_my_name_action_bank_deposit_post_with_http_info(body, name, **kwargs)  # noqa: E501
            return data

    def action_deposit_bank_my_name_action_bank_deposit_post_with_http_info(self, body, name, **kwargs):  # noqa: E501
        """Action Deposit Bank  # noqa: E501

        Deposit an item in a bank on the character's map.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.action_deposit_bank_my_name_action_bank_deposit_post_with_http_info(body, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SimpleItemSchema body: (required)
        :param object name: Name of your character. (required)
        :return: BankItemTransactionResponseSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method action_deposit_bank_my_name_action_bank_deposit_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `action_deposit_bank_my_name_action_bank_deposit_post`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `action_deposit_bank_my_name_action_bank_deposit_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTBearer']  # noqa: E501

        return self.api_client.call_api(
            '/my/{name}/action/bank/deposit', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BankItemTransactionResponseSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def action_equip_item_my_name_action_equip_post(self, body, name, **kwargs):  # noqa: E501
        """Action Equip Item  # noqa: E501

        Equip an item on your character.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.action_equip_item_my_name_action_equip_post(body, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EquipSchema body: (required)
        :param object name: Name of your character. (required)
        :return: EquipmentResponseSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.action_equip_item_my_name_action_equip_post_with_http_info(body, name, **kwargs)  # noqa: E501
        else:
            (data) = self.action_equip_item_my_name_action_equip_post_with_http_info(body, name, **kwargs)  # noqa: E501
            return data

    def action_equip_item_my_name_action_equip_post_with_http_info(self, body, name, **kwargs):  # noqa: E501
        """Action Equip Item  # noqa: E501

        Equip an item on your character.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.action_equip_item_my_name_action_equip_post_with_http_info(body, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EquipSchema body: (required)
        :param object name: Name of your character. (required)
        :return: EquipmentResponseSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method action_equip_item_my_name_action_equip_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `action_equip_item_my_name_action_equip_post`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `action_equip_item_my_name_action_equip_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTBearer']  # noqa: E501

        return self.api_client.call_api(
            '/my/{name}/action/equip', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EquipmentResponseSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def action_fight_my_name_action_fight_post(self, name, **kwargs):  # noqa: E501
        """Action Fight  # noqa: E501

        Start a fight against a monster on the character's map.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.action_fight_my_name_action_fight_post(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object name: Name of your character. (required)
        :return: CharacterFightResponseSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.action_fight_my_name_action_fight_post_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.action_fight_my_name_action_fight_post_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def action_fight_my_name_action_fight_post_with_http_info(self, name, **kwargs):  # noqa: E501
        """Action Fight  # noqa: E501

        Start a fight against a monster on the character's map.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.action_fight_my_name_action_fight_post_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object name: Name of your character. (required)
        :return: CharacterFightResponseSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method action_fight_my_name_action_fight_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `action_fight_my_name_action_fight_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTBearer']  # noqa: E501

        return self.api_client.call_api(
            '/my/{name}/action/fight', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CharacterFightResponseSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def action_gathering_my_name_action_gathering_post(self, name, **kwargs):  # noqa: E501
        """Action Gathering  # noqa: E501

        Harvest a resource on the character's map.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.action_gathering_my_name_action_gathering_post(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object name: Name of your character. (required)
        :return: SkillResponseSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.action_gathering_my_name_action_gathering_post_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.action_gathering_my_name_action_gathering_post_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def action_gathering_my_name_action_gathering_post_with_http_info(self, name, **kwargs):  # noqa: E501
        """Action Gathering  # noqa: E501

        Harvest a resource on the character's map.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.action_gathering_my_name_action_gathering_post_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object name: Name of your character. (required)
        :return: SkillResponseSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method action_gathering_my_name_action_gathering_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `action_gathering_my_name_action_gathering_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTBearer']  # noqa: E501

        return self.api_client.call_api(
            '/my/{name}/action/gathering', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SkillResponseSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def action_ge_buy_item_my_name_action_ge_buy_post(self, body, name, **kwargs):  # noqa: E501
        """Action Ge Buy Item  # noqa: E501

        Buy an item at the Grand Exchange on the character's map.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.action_ge_buy_item_my_name_action_ge_buy_post(body, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GETransactionItemSchema body: (required)
        :param object name: Name of your character. (required)
        :return: GETransactionResponseSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.action_ge_buy_item_my_name_action_ge_buy_post_with_http_info(body, name, **kwargs)  # noqa: E501
        else:
            (data) = self.action_ge_buy_item_my_name_action_ge_buy_post_with_http_info(body, name, **kwargs)  # noqa: E501
            return data

    def action_ge_buy_item_my_name_action_ge_buy_post_with_http_info(self, body, name, **kwargs):  # noqa: E501
        """Action Ge Buy Item  # noqa: E501

        Buy an item at the Grand Exchange on the character's map.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.action_ge_buy_item_my_name_action_ge_buy_post_with_http_info(body, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GETransactionItemSchema body: (required)
        :param object name: Name of your character. (required)
        :return: GETransactionResponseSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method action_ge_buy_item_my_name_action_ge_buy_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `action_ge_buy_item_my_name_action_ge_buy_post`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `action_ge_buy_item_my_name_action_ge_buy_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTBearer']  # noqa: E501

        return self.api_client.call_api(
            '/my/{name}/action/ge/buy', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GETransactionResponseSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def action_ge_sell_item_my_name_action_ge_sell_post(self, body, name, **kwargs):  # noqa: E501
        """Action Ge Sell Item  # noqa: E501

        Sell an item at the Grand Exchange on the character's map.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.action_ge_sell_item_my_name_action_ge_sell_post(body, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GETransactionItemSchema body: (required)
        :param object name: Name of your character. (required)
        :return: GETransactionResponseSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.action_ge_sell_item_my_name_action_ge_sell_post_with_http_info(body, name, **kwargs)  # noqa: E501
        else:
            (data) = self.action_ge_sell_item_my_name_action_ge_sell_post_with_http_info(body, name, **kwargs)  # noqa: E501
            return data

    def action_ge_sell_item_my_name_action_ge_sell_post_with_http_info(self, body, name, **kwargs):  # noqa: E501
        """Action Ge Sell Item  # noqa: E501

        Sell an item at the Grand Exchange on the character's map.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.action_ge_sell_item_my_name_action_ge_sell_post_with_http_info(body, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param GETransactionItemSchema body: (required)
        :param object name: Name of your character. (required)
        :return: GETransactionResponseSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method action_ge_sell_item_my_name_action_ge_sell_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `action_ge_sell_item_my_name_action_ge_sell_post`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `action_ge_sell_item_my_name_action_ge_sell_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTBearer']  # noqa: E501

        return self.api_client.call_api(
            '/my/{name}/action/ge/sell', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GETransactionResponseSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def action_move_my_name_action_move_post(self, body, name, **kwargs):  # noqa: E501
        """Action Move  # noqa: E501

        Moves a character on the map using the map's X and Y position.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.action_move_my_name_action_move_post(body, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DestinationSchema body: (required)
        :param object name: Name of your character. (required)
        :return: CharacterMovementResponseSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.action_move_my_name_action_move_post_with_http_info(body, name, **kwargs)  # noqa: E501
        else:
            (data) = self.action_move_my_name_action_move_post_with_http_info(body, name, **kwargs)  # noqa: E501
            return data

    def action_move_my_name_action_move_post_with_http_info(self, body, name, **kwargs):  # noqa: E501
        """Action Move  # noqa: E501

        Moves a character on the map using the map's X and Y position.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.action_move_my_name_action_move_post_with_http_info(body, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DestinationSchema body: (required)
        :param object name: Name of your character. (required)
        :return: CharacterMovementResponseSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method action_move_my_name_action_move_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `action_move_my_name_action_move_post`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `action_move_my_name_action_move_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTBearer']  # noqa: E501

        return self.api_client.call_api(
            '/my/{name}/action/move', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CharacterMovementResponseSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def action_recycling_my_name_action_recycling_post(self, body, name, **kwargs):  # noqa: E501
        """Action Recycling  # noqa: E501

        Recyling an item. The character must be on a map with a workshop (only for equipments and weapons).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.action_recycling_my_name_action_recycling_post(body, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RecyclingSchema body: (required)
        :param object name: Name of your character. (required)
        :return: RecyclingResponseSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.action_recycling_my_name_action_recycling_post_with_http_info(body, name, **kwargs)  # noqa: E501
        else:
            (data) = self.action_recycling_my_name_action_recycling_post_with_http_info(body, name, **kwargs)  # noqa: E501
            return data

    def action_recycling_my_name_action_recycling_post_with_http_info(self, body, name, **kwargs):  # noqa: E501
        """Action Recycling  # noqa: E501

        Recyling an item. The character must be on a map with a workshop (only for equipments and weapons).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.action_recycling_my_name_action_recycling_post_with_http_info(body, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RecyclingSchema body: (required)
        :param object name: Name of your character. (required)
        :return: RecyclingResponseSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method action_recycling_my_name_action_recycling_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `action_recycling_my_name_action_recycling_post`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `action_recycling_my_name_action_recycling_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTBearer']  # noqa: E501

        return self.api_client.call_api(
            '/my/{name}/action/recycling', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RecyclingResponseSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def action_task_cancel_my_name_action_task_cancel_post(self, name, **kwargs):  # noqa: E501
        """Action Task Cancel  # noqa: E501

        Cancel a task for 1 tasks coin.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.action_task_cancel_my_name_action_task_cancel_post(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object name: Name of your character. (required)
        :return: TaskCancelledResponseSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.action_task_cancel_my_name_action_task_cancel_post_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.action_task_cancel_my_name_action_task_cancel_post_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def action_task_cancel_my_name_action_task_cancel_post_with_http_info(self, name, **kwargs):  # noqa: E501
        """Action Task Cancel  # noqa: E501

        Cancel a task for 1 tasks coin.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.action_task_cancel_my_name_action_task_cancel_post_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object name: Name of your character. (required)
        :return: TaskCancelledResponseSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method action_task_cancel_my_name_action_task_cancel_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `action_task_cancel_my_name_action_task_cancel_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTBearer']  # noqa: E501

        return self.api_client.call_api(
            '/my/{name}/action/task/cancel', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskCancelledResponseSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def action_task_exchange_my_name_action_task_exchange_post(self, name, **kwargs):  # noqa: E501
        """Action Task Exchange  # noqa: E501

        Exchange 3 tasks coins for a random reward. Rewards are exclusive resources for crafting  items.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.action_task_exchange_my_name_action_task_exchange_post(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object name: Name of your character. (required)
        :return: TaskRewardResponseSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.action_task_exchange_my_name_action_task_exchange_post_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.action_task_exchange_my_name_action_task_exchange_post_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def action_task_exchange_my_name_action_task_exchange_post_with_http_info(self, name, **kwargs):  # noqa: E501
        """Action Task Exchange  # noqa: E501

        Exchange 3 tasks coins for a random reward. Rewards are exclusive resources for crafting  items.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.action_task_exchange_my_name_action_task_exchange_post_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object name: Name of your character. (required)
        :return: TaskRewardResponseSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method action_task_exchange_my_name_action_task_exchange_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `action_task_exchange_my_name_action_task_exchange_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTBearer']  # noqa: E501

        return self.api_client.call_api(
            '/my/{name}/action/task/exchange', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskRewardResponseSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def action_unequip_item_my_name_action_unequip_post(self, body, name, **kwargs):  # noqa: E501
        """Action Unequip Item  # noqa: E501

        Unequip an item on your character.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.action_unequip_item_my_name_action_unequip_post(body, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UnequipSchema body: (required)
        :param object name: Name of your character. (required)
        :return: EquipmentResponseSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.action_unequip_item_my_name_action_unequip_post_with_http_info(body, name, **kwargs)  # noqa: E501
        else:
            (data) = self.action_unequip_item_my_name_action_unequip_post_with_http_info(body, name, **kwargs)  # noqa: E501
            return data

    def action_unequip_item_my_name_action_unequip_post_with_http_info(self, body, name, **kwargs):  # noqa: E501
        """Action Unequip Item  # noqa: E501

        Unequip an item on your character.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.action_unequip_item_my_name_action_unequip_post_with_http_info(body, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UnequipSchema body: (required)
        :param object name: Name of your character. (required)
        :return: EquipmentResponseSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method action_unequip_item_my_name_action_unequip_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `action_unequip_item_my_name_action_unequip_post`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `action_unequip_item_my_name_action_unequip_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTBearer']  # noqa: E501

        return self.api_client.call_api(
            '/my/{name}/action/unequip', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EquipmentResponseSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def action_withdraw_bank_gold_my_name_action_bank_withdraw_gold_post(self, body, name, **kwargs):  # noqa: E501
        """Action Withdraw Bank Gold  # noqa: E501

        Withdraw gold from your bank.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.action_withdraw_bank_gold_my_name_action_bank_withdraw_gold_post(body, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DepositWithdrawGoldSchema body: (required)
        :param object name: Name of your character. (required)
        :return: BankGoldTransactionResponseSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.action_withdraw_bank_gold_my_name_action_bank_withdraw_gold_post_with_http_info(body, name, **kwargs)  # noqa: E501
        else:
            (data) = self.action_withdraw_bank_gold_my_name_action_bank_withdraw_gold_post_with_http_info(body, name, **kwargs)  # noqa: E501
            return data

    def action_withdraw_bank_gold_my_name_action_bank_withdraw_gold_post_with_http_info(self, body, name, **kwargs):  # noqa: E501
        """Action Withdraw Bank Gold  # noqa: E501

        Withdraw gold from your bank.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.action_withdraw_bank_gold_my_name_action_bank_withdraw_gold_post_with_http_info(body, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DepositWithdrawGoldSchema body: (required)
        :param object name: Name of your character. (required)
        :return: BankGoldTransactionResponseSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method action_withdraw_bank_gold_my_name_action_bank_withdraw_gold_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `action_withdraw_bank_gold_my_name_action_bank_withdraw_gold_post`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `action_withdraw_bank_gold_my_name_action_bank_withdraw_gold_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTBearer']  # noqa: E501

        return self.api_client.call_api(
            '/my/{name}/action/bank/withdraw/gold', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BankGoldTransactionResponseSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def action_withdraw_bank_my_name_action_bank_withdraw_post(self, body, name, **kwargs):  # noqa: E501
        """Action Withdraw Bank  # noqa: E501

        Take an item from your bank and put it in the character's inventory.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.action_withdraw_bank_my_name_action_bank_withdraw_post(body, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SimpleItemSchema body: (required)
        :param object name: Name of your character. (required)
        :return: BankItemTransactionResponseSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.action_withdraw_bank_my_name_action_bank_withdraw_post_with_http_info(body, name, **kwargs)  # noqa: E501
        else:
            (data) = self.action_withdraw_bank_my_name_action_bank_withdraw_post_with_http_info(body, name, **kwargs)  # noqa: E501
            return data

    def action_withdraw_bank_my_name_action_bank_withdraw_post_with_http_info(self, body, name, **kwargs):  # noqa: E501
        """Action Withdraw Bank  # noqa: E501

        Take an item from your bank and put it in the character's inventory.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.action_withdraw_bank_my_name_action_bank_withdraw_post_with_http_info(body, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SimpleItemSchema body: (required)
        :param object name: Name of your character. (required)
        :return: BankItemTransactionResponseSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method action_withdraw_bank_my_name_action_bank_withdraw_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `action_withdraw_bank_my_name_action_bank_withdraw_post`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `action_withdraw_bank_my_name_action_bank_withdraw_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTBearer']  # noqa: E501

        return self.api_client.call_api(
            '/my/{name}/action/bank/withdraw', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BankItemTransactionResponseSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_characters_logs_my_logs_get(self, **kwargs):  # noqa: E501
        """Get All Characters Logs  # noqa: E501

        History of the last 100 actions of all your characters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_characters_logs_my_logs_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object page: Page number
        :param object size: Page size
        :return: DataPageLogSchema_
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_characters_logs_my_logs_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_characters_logs_my_logs_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_characters_logs_my_logs_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get All Characters Logs  # noqa: E501

        History of the last 100 actions of all your characters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_characters_logs_my_logs_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object page: Page number
        :param object size: Page size
        :return: DataPageLogSchema_
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_characters_logs_my_logs_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTBearer']  # noqa: E501

        return self.api_client.call_api(
            '/my/logs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DataPageLogSchema_',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_my_characters_my_characters_get(self, **kwargs):  # noqa: E501
        """Get My Characters  # noqa: E501

        List of your characters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_my_characters_my_characters_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: MyCharactersListSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_my_characters_my_characters_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_my_characters_my_characters_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_my_characters_my_characters_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get My Characters  # noqa: E501

        List of your characters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_my_characters_my_characters_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: MyCharactersListSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_my_characters_my_characters_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['JWTBearer']  # noqa: E501

        return self.api_client.call_api(
            '/my/characters', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MyCharactersListSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
