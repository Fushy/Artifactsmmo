# coding: utf-8

"""
    Artifacts API

     Artifacts is an API-based MMO game where you can manage 5 characters to explore, fight, gather resources, craft items and much more.  Website: https://artifactsmmo.com/  Documentation: https://docs.artifactsmmo.com/  OpenAPI Spec: https://api.artifactsmmo.com/openapi.json   # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CooldownSchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total_seconds': 'object',
        'remaining_seconds': 'object',
        'started_at': 'object',
        'expiration': 'object',
        'reason': 'object'
    }

    attribute_map = {
        'total_seconds': 'total_seconds',
        'remaining_seconds': 'remaining_seconds',
        'started_at': 'started_at',
        'expiration': 'expiration',
        'reason': 'reason'
    }

    def __init__(self, total_seconds=None, remaining_seconds=None, started_at=None, expiration=None, reason=None):  # noqa: E501
        """CooldownSchema - a model defined in Swagger"""  # noqa: E501
        self._total_seconds = None
        self._remaining_seconds = None
        self._started_at = None
        self._expiration = None
        self._reason = None
        self.discriminator = None
        self.total_seconds = total_seconds
        self.remaining_seconds = remaining_seconds
        self.started_at = started_at
        self.expiration = expiration
        self.reason = reason

    @property
    def total_seconds(self):
        """Gets the total_seconds of this CooldownSchema.  # noqa: E501

        The total seconds of the cooldown.  # noqa: E501

        :return: The total_seconds of this CooldownSchema.  # noqa: E501
        :rtype: object
        """
        return self._total_seconds

    @total_seconds.setter
    def total_seconds(self, total_seconds):
        """Sets the total_seconds of this CooldownSchema.

        The total seconds of the cooldown.  # noqa: E501

        :param total_seconds: The total_seconds of this CooldownSchema.  # noqa: E501
        :type: object
        """
        if total_seconds is None:
            raise ValueError("Invalid value for `total_seconds`, must not be `None`")  # noqa: E501

        self._total_seconds = total_seconds

    @property
    def remaining_seconds(self):
        """Gets the remaining_seconds of this CooldownSchema.  # noqa: E501

        The remaining seconds of the cooldown.  # noqa: E501

        :return: The remaining_seconds of this CooldownSchema.  # noqa: E501
        :rtype: object
        """
        return self._remaining_seconds

    @remaining_seconds.setter
    def remaining_seconds(self, remaining_seconds):
        """Sets the remaining_seconds of this CooldownSchema.

        The remaining seconds of the cooldown.  # noqa: E501

        :param remaining_seconds: The remaining_seconds of this CooldownSchema.  # noqa: E501
        :type: object
        """
        if remaining_seconds is None:
            raise ValueError("Invalid value for `remaining_seconds`, must not be `None`")  # noqa: E501

        self._remaining_seconds = remaining_seconds

    @property
    def started_at(self):
        """Gets the started_at of this CooldownSchema.  # noqa: E501

        The start of the cooldown.  # noqa: E501

        :return: The started_at of this CooldownSchema.  # noqa: E501
        :rtype: object
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this CooldownSchema.

        The start of the cooldown.  # noqa: E501

        :param started_at: The started_at of this CooldownSchema.  # noqa: E501
        :type: object
        """
        if started_at is None:
            raise ValueError("Invalid value for `started_at`, must not be `None`")  # noqa: E501

        self._started_at = started_at

    @property
    def expiration(self):
        """Gets the expiration of this CooldownSchema.  # noqa: E501

        The expiration of the cooldown.  # noqa: E501

        :return: The expiration of this CooldownSchema.  # noqa: E501
        :rtype: object
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration):
        """Sets the expiration of this CooldownSchema.

        The expiration of the cooldown.  # noqa: E501

        :param expiration: The expiration of this CooldownSchema.  # noqa: E501
        :type: object
        """
        if expiration is None:
            raise ValueError("Invalid value for `expiration`, must not be `None`")  # noqa: E501

        self._expiration = expiration

    @property
    def reason(self):
        """Gets the reason of this CooldownSchema.  # noqa: E501

        The reason of the cooldown.  # noqa: E501

        :return: The reason of this CooldownSchema.  # noqa: E501
        :rtype: object
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this CooldownSchema.

        The reason of the cooldown.  # noqa: E501

        :param reason: The reason of this CooldownSchema.  # noqa: E501
        :type: object
        """
        if reason is None:
            raise ValueError("Invalid value for `reason`, must not be `None`")  # noqa: E501

        self._reason = reason

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CooldownSchema, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CooldownSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
