# coding: utf-8

"""
    Artifacts API

     Artifacts is an API-based MMO game where you can manage 5 characters to explore, fight, gather resources, craft items and much more.  Website: https://artifactsmmo.com/  Documentation: https://docs.artifactsmmo.com/  OpenAPI Spec: https://api.artifactsmmo.com/openapi.json   # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CharacterLeaderboardSchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'object',
        'skin': 'object',
        'achievements_points': 'object',
        'level': 'object',
        'total_xp': 'object',
        'mining_level': 'object',
        'mining_total_xp': 'object',
        'woodcutting_level': 'object',
        'woodcutting_total_xp': 'object',
        'fishing_level': 'object',
        'fishing_total_xp': 'object',
        'weaponcrafting_level': 'object',
        'weaponcrafting_total_xp': 'object',
        'gearcrafting_level': 'object',
        'gearcrafting_total_xp': 'object',
        'jewelrycrafting_level': 'object',
        'jewelrycrafting_total_xp': 'object',
        'cooking_level': 'object',
        'cooking_total_xp': 'object',
        'gold': 'object'
    }

    attribute_map = {
        'name': 'name',
        'skin': 'skin',
        'achievements_points': 'achievements_points',
        'level': 'level',
        'total_xp': 'total_xp',
        'mining_level': 'mining_level',
        'mining_total_xp': 'mining_total_xp',
        'woodcutting_level': 'woodcutting_level',
        'woodcutting_total_xp': 'woodcutting_total_xp',
        'fishing_level': 'fishing_level',
        'fishing_total_xp': 'fishing_total_xp',
        'weaponcrafting_level': 'weaponcrafting_level',
        'weaponcrafting_total_xp': 'weaponcrafting_total_xp',
        'gearcrafting_level': 'gearcrafting_level',
        'gearcrafting_total_xp': 'gearcrafting_total_xp',
        'jewelrycrafting_level': 'jewelrycrafting_level',
        'jewelrycrafting_total_xp': 'jewelrycrafting_total_xp',
        'cooking_level': 'cooking_level',
        'cooking_total_xp': 'cooking_total_xp',
        'gold': 'gold'
    }

    def __init__(self, name=None, skin=None, achievements_points=None, level=None, total_xp=None, mining_level=None, mining_total_xp=None, woodcutting_level=None, woodcutting_total_xp=None, fishing_level=None, fishing_total_xp=None, weaponcrafting_level=None, weaponcrafting_total_xp=None, gearcrafting_level=None, gearcrafting_total_xp=None, jewelrycrafting_level=None, jewelrycrafting_total_xp=None, cooking_level=None, cooking_total_xp=None, gold=None):  # noqa: E501
        """CharacterLeaderboardSchema - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._skin = None
        self._achievements_points = None
        self._level = None
        self._total_xp = None
        self._mining_level = None
        self._mining_total_xp = None
        self._woodcutting_level = None
        self._woodcutting_total_xp = None
        self._fishing_level = None
        self._fishing_total_xp = None
        self._weaponcrafting_level = None
        self._weaponcrafting_total_xp = None
        self._gearcrafting_level = None
        self._gearcrafting_total_xp = None
        self._jewelrycrafting_level = None
        self._jewelrycrafting_total_xp = None
        self._cooking_level = None
        self._cooking_total_xp = None
        self._gold = None
        self.discriminator = None
        self.name = name
        self.skin = skin
        self.achievements_points = achievements_points
        self.level = level
        self.total_xp = total_xp
        self.mining_level = mining_level
        self.mining_total_xp = mining_total_xp
        self.woodcutting_level = woodcutting_level
        self.woodcutting_total_xp = woodcutting_total_xp
        self.fishing_level = fishing_level
        self.fishing_total_xp = fishing_total_xp
        self.weaponcrafting_level = weaponcrafting_level
        self.weaponcrafting_total_xp = weaponcrafting_total_xp
        self.gearcrafting_level = gearcrafting_level
        self.gearcrafting_total_xp = gearcrafting_total_xp
        self.jewelrycrafting_level = jewelrycrafting_level
        self.jewelrycrafting_total_xp = jewelrycrafting_total_xp
        self.cooking_level = cooking_level
        self.cooking_total_xp = cooking_total_xp
        self.gold = gold

    @property
    def name(self):
        """Gets the name of this CharacterLeaderboardSchema.  # noqa: E501

        Character name.  # noqa: E501

        :return: The name of this CharacterLeaderboardSchema.  # noqa: E501
        :rtype: object
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CharacterLeaderboardSchema.

        Character name.  # noqa: E501

        :param name: The name of this CharacterLeaderboardSchema.  # noqa: E501
        :type: object
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def skin(self):
        """Gets the skin of this CharacterLeaderboardSchema.  # noqa: E501

        Character skin code.  # noqa: E501

        :return: The skin of this CharacterLeaderboardSchema.  # noqa: E501
        :rtype: object
        """
        return self._skin

    @skin.setter
    def skin(self, skin):
        """Sets the skin of this CharacterLeaderboardSchema.

        Character skin code.  # noqa: E501

        :param skin: The skin of this CharacterLeaderboardSchema.  # noqa: E501
        :type: object
        """
        if skin is None:
            raise ValueError("Invalid value for `skin`, must not be `None`")  # noqa: E501

        self._skin = skin

    @property
    def achievements_points(self):
        """Gets the achievements_points of this CharacterLeaderboardSchema.  # noqa: E501

        Achievements points.  # noqa: E501

        :return: The achievements_points of this CharacterLeaderboardSchema.  # noqa: E501
        :rtype: object
        """
        return self._achievements_points

    @achievements_points.setter
    def achievements_points(self, achievements_points):
        """Sets the achievements_points of this CharacterLeaderboardSchema.

        Achievements points.  # noqa: E501

        :param achievements_points: The achievements_points of this CharacterLeaderboardSchema.  # noqa: E501
        :type: object
        """
        if achievements_points is None:
            raise ValueError("Invalid value for `achievements_points`, must not be `None`")  # noqa: E501

        self._achievements_points = achievements_points

    @property
    def level(self):
        """Gets the level of this CharacterLeaderboardSchema.  # noqa: E501

        Combat level.  # noqa: E501

        :return: The level of this CharacterLeaderboardSchema.  # noqa: E501
        :rtype: object
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this CharacterLeaderboardSchema.

        Combat level.  # noqa: E501

        :param level: The level of this CharacterLeaderboardSchema.  # noqa: E501
        :type: object
        """
        if level is None:
            raise ValueError("Invalid value for `level`, must not be `None`")  # noqa: E501

        self._level = level

    @property
    def total_xp(self):
        """Gets the total_xp of this CharacterLeaderboardSchema.  # noqa: E501

        Total XP of your character.  # noqa: E501

        :return: The total_xp of this CharacterLeaderboardSchema.  # noqa: E501
        :rtype: object
        """
        return self._total_xp

    @total_xp.setter
    def total_xp(self, total_xp):
        """Sets the total_xp of this CharacterLeaderboardSchema.

        Total XP of your character.  # noqa: E501

        :param total_xp: The total_xp of this CharacterLeaderboardSchema.  # noqa: E501
        :type: object
        """
        if total_xp is None:
            raise ValueError("Invalid value for `total_xp`, must not be `None`")  # noqa: E501

        self._total_xp = total_xp

    @property
    def mining_level(self):
        """Gets the mining_level of this CharacterLeaderboardSchema.  # noqa: E501

        Mining level.  # noqa: E501

        :return: The mining_level of this CharacterLeaderboardSchema.  # noqa: E501
        :rtype: object
        """
        return self._mining_level

    @mining_level.setter
    def mining_level(self, mining_level):
        """Sets the mining_level of this CharacterLeaderboardSchema.

        Mining level.  # noqa: E501

        :param mining_level: The mining_level of this CharacterLeaderboardSchema.  # noqa: E501
        :type: object
        """
        if mining_level is None:
            raise ValueError("Invalid value for `mining_level`, must not be `None`")  # noqa: E501

        self._mining_level = mining_level

    @property
    def mining_total_xp(self):
        """Gets the mining_total_xp of this CharacterLeaderboardSchema.  # noqa: E501

        Mining total xp.  # noqa: E501

        :return: The mining_total_xp of this CharacterLeaderboardSchema.  # noqa: E501
        :rtype: object
        """
        return self._mining_total_xp

    @mining_total_xp.setter
    def mining_total_xp(self, mining_total_xp):
        """Sets the mining_total_xp of this CharacterLeaderboardSchema.

        Mining total xp.  # noqa: E501

        :param mining_total_xp: The mining_total_xp of this CharacterLeaderboardSchema.  # noqa: E501
        :type: object
        """
        if mining_total_xp is None:
            raise ValueError("Invalid value for `mining_total_xp`, must not be `None`")  # noqa: E501

        self._mining_total_xp = mining_total_xp

    @property
    def woodcutting_level(self):
        """Gets the woodcutting_level of this CharacterLeaderboardSchema.  # noqa: E501

        Woodcutting level.  # noqa: E501

        :return: The woodcutting_level of this CharacterLeaderboardSchema.  # noqa: E501
        :rtype: object
        """
        return self._woodcutting_level

    @woodcutting_level.setter
    def woodcutting_level(self, woodcutting_level):
        """Sets the woodcutting_level of this CharacterLeaderboardSchema.

        Woodcutting level.  # noqa: E501

        :param woodcutting_level: The woodcutting_level of this CharacterLeaderboardSchema.  # noqa: E501
        :type: object
        """
        if woodcutting_level is None:
            raise ValueError("Invalid value for `woodcutting_level`, must not be `None`")  # noqa: E501

        self._woodcutting_level = woodcutting_level

    @property
    def woodcutting_total_xp(self):
        """Gets the woodcutting_total_xp of this CharacterLeaderboardSchema.  # noqa: E501

        Woodcutting total xp.  # noqa: E501

        :return: The woodcutting_total_xp of this CharacterLeaderboardSchema.  # noqa: E501
        :rtype: object
        """
        return self._woodcutting_total_xp

    @woodcutting_total_xp.setter
    def woodcutting_total_xp(self, woodcutting_total_xp):
        """Sets the woodcutting_total_xp of this CharacterLeaderboardSchema.

        Woodcutting total xp.  # noqa: E501

        :param woodcutting_total_xp: The woodcutting_total_xp of this CharacterLeaderboardSchema.  # noqa: E501
        :type: object
        """
        if woodcutting_total_xp is None:
            raise ValueError("Invalid value for `woodcutting_total_xp`, must not be `None`")  # noqa: E501

        self._woodcutting_total_xp = woodcutting_total_xp

    @property
    def fishing_level(self):
        """Gets the fishing_level of this CharacterLeaderboardSchema.  # noqa: E501

        Fishing level.  # noqa: E501

        :return: The fishing_level of this CharacterLeaderboardSchema.  # noqa: E501
        :rtype: object
        """
        return self._fishing_level

    @fishing_level.setter
    def fishing_level(self, fishing_level):
        """Sets the fishing_level of this CharacterLeaderboardSchema.

        Fishing level.  # noqa: E501

        :param fishing_level: The fishing_level of this CharacterLeaderboardSchema.  # noqa: E501
        :type: object
        """
        if fishing_level is None:
            raise ValueError("Invalid value for `fishing_level`, must not be `None`")  # noqa: E501

        self._fishing_level = fishing_level

    @property
    def fishing_total_xp(self):
        """Gets the fishing_total_xp of this CharacterLeaderboardSchema.  # noqa: E501

        Fishing total xp.  # noqa: E501

        :return: The fishing_total_xp of this CharacterLeaderboardSchema.  # noqa: E501
        :rtype: object
        """
        return self._fishing_total_xp

    @fishing_total_xp.setter
    def fishing_total_xp(self, fishing_total_xp):
        """Sets the fishing_total_xp of this CharacterLeaderboardSchema.

        Fishing total xp.  # noqa: E501

        :param fishing_total_xp: The fishing_total_xp of this CharacterLeaderboardSchema.  # noqa: E501
        :type: object
        """
        if fishing_total_xp is None:
            raise ValueError("Invalid value for `fishing_total_xp`, must not be `None`")  # noqa: E501

        self._fishing_total_xp = fishing_total_xp

    @property
    def weaponcrafting_level(self):
        """Gets the weaponcrafting_level of this CharacterLeaderboardSchema.  # noqa: E501

        Weaponcrafting level.  # noqa: E501

        :return: The weaponcrafting_level of this CharacterLeaderboardSchema.  # noqa: E501
        :rtype: object
        """
        return self._weaponcrafting_level

    @weaponcrafting_level.setter
    def weaponcrafting_level(self, weaponcrafting_level):
        """Sets the weaponcrafting_level of this CharacterLeaderboardSchema.

        Weaponcrafting level.  # noqa: E501

        :param weaponcrafting_level: The weaponcrafting_level of this CharacterLeaderboardSchema.  # noqa: E501
        :type: object
        """
        if weaponcrafting_level is None:
            raise ValueError("Invalid value for `weaponcrafting_level`, must not be `None`")  # noqa: E501

        self._weaponcrafting_level = weaponcrafting_level

    @property
    def weaponcrafting_total_xp(self):
        """Gets the weaponcrafting_total_xp of this CharacterLeaderboardSchema.  # noqa: E501

        Weaponcrafting total xp.  # noqa: E501

        :return: The weaponcrafting_total_xp of this CharacterLeaderboardSchema.  # noqa: E501
        :rtype: object
        """
        return self._weaponcrafting_total_xp

    @weaponcrafting_total_xp.setter
    def weaponcrafting_total_xp(self, weaponcrafting_total_xp):
        """Sets the weaponcrafting_total_xp of this CharacterLeaderboardSchema.

        Weaponcrafting total xp.  # noqa: E501

        :param weaponcrafting_total_xp: The weaponcrafting_total_xp of this CharacterLeaderboardSchema.  # noqa: E501
        :type: object
        """
        if weaponcrafting_total_xp is None:
            raise ValueError("Invalid value for `weaponcrafting_total_xp`, must not be `None`")  # noqa: E501

        self._weaponcrafting_total_xp = weaponcrafting_total_xp

    @property
    def gearcrafting_level(self):
        """Gets the gearcrafting_level of this CharacterLeaderboardSchema.  # noqa: E501

        Gearcrafting level.  # noqa: E501

        :return: The gearcrafting_level of this CharacterLeaderboardSchema.  # noqa: E501
        :rtype: object
        """
        return self._gearcrafting_level

    @gearcrafting_level.setter
    def gearcrafting_level(self, gearcrafting_level):
        """Sets the gearcrafting_level of this CharacterLeaderboardSchema.

        Gearcrafting level.  # noqa: E501

        :param gearcrafting_level: The gearcrafting_level of this CharacterLeaderboardSchema.  # noqa: E501
        :type: object
        """
        if gearcrafting_level is None:
            raise ValueError("Invalid value for `gearcrafting_level`, must not be `None`")  # noqa: E501

        self._gearcrafting_level = gearcrafting_level

    @property
    def gearcrafting_total_xp(self):
        """Gets the gearcrafting_total_xp of this CharacterLeaderboardSchema.  # noqa: E501

        Gearcrafting total xp.  # noqa: E501

        :return: The gearcrafting_total_xp of this CharacterLeaderboardSchema.  # noqa: E501
        :rtype: object
        """
        return self._gearcrafting_total_xp

    @gearcrafting_total_xp.setter
    def gearcrafting_total_xp(self, gearcrafting_total_xp):
        """Sets the gearcrafting_total_xp of this CharacterLeaderboardSchema.

        Gearcrafting total xp.  # noqa: E501

        :param gearcrafting_total_xp: The gearcrafting_total_xp of this CharacterLeaderboardSchema.  # noqa: E501
        :type: object
        """
        if gearcrafting_total_xp is None:
            raise ValueError("Invalid value for `gearcrafting_total_xp`, must not be `None`")  # noqa: E501

        self._gearcrafting_total_xp = gearcrafting_total_xp

    @property
    def jewelrycrafting_level(self):
        """Gets the jewelrycrafting_level of this CharacterLeaderboardSchema.  # noqa: E501

        Jewelrycrafting level.  # noqa: E501

        :return: The jewelrycrafting_level of this CharacterLeaderboardSchema.  # noqa: E501
        :rtype: object
        """
        return self._jewelrycrafting_level

    @jewelrycrafting_level.setter
    def jewelrycrafting_level(self, jewelrycrafting_level):
        """Sets the jewelrycrafting_level of this CharacterLeaderboardSchema.

        Jewelrycrafting level.  # noqa: E501

        :param jewelrycrafting_level: The jewelrycrafting_level of this CharacterLeaderboardSchema.  # noqa: E501
        :type: object
        """
        if jewelrycrafting_level is None:
            raise ValueError("Invalid value for `jewelrycrafting_level`, must not be `None`")  # noqa: E501

        self._jewelrycrafting_level = jewelrycrafting_level

    @property
    def jewelrycrafting_total_xp(self):
        """Gets the jewelrycrafting_total_xp of this CharacterLeaderboardSchema.  # noqa: E501

        Jewelrycrafting total xp.  # noqa: E501

        :return: The jewelrycrafting_total_xp of this CharacterLeaderboardSchema.  # noqa: E501
        :rtype: object
        """
        return self._jewelrycrafting_total_xp

    @jewelrycrafting_total_xp.setter
    def jewelrycrafting_total_xp(self, jewelrycrafting_total_xp):
        """Sets the jewelrycrafting_total_xp of this CharacterLeaderboardSchema.

        Jewelrycrafting total xp.  # noqa: E501

        :param jewelrycrafting_total_xp: The jewelrycrafting_total_xp of this CharacterLeaderboardSchema.  # noqa: E501
        :type: object
        """
        if jewelrycrafting_total_xp is None:
            raise ValueError("Invalid value for `jewelrycrafting_total_xp`, must not be `None`")  # noqa: E501

        self._jewelrycrafting_total_xp = jewelrycrafting_total_xp

    @property
    def cooking_level(self):
        """Gets the cooking_level of this CharacterLeaderboardSchema.  # noqa: E501

        Cooking level.  # noqa: E501

        :return: The cooking_level of this CharacterLeaderboardSchema.  # noqa: E501
        :rtype: object
        """
        return self._cooking_level

    @cooking_level.setter
    def cooking_level(self, cooking_level):
        """Sets the cooking_level of this CharacterLeaderboardSchema.

        Cooking level.  # noqa: E501

        :param cooking_level: The cooking_level of this CharacterLeaderboardSchema.  # noqa: E501
        :type: object
        """
        if cooking_level is None:
            raise ValueError("Invalid value for `cooking_level`, must not be `None`")  # noqa: E501

        self._cooking_level = cooking_level

    @property
    def cooking_total_xp(self):
        """Gets the cooking_total_xp of this CharacterLeaderboardSchema.  # noqa: E501

        Cooking total xp.  # noqa: E501

        :return: The cooking_total_xp of this CharacterLeaderboardSchema.  # noqa: E501
        :rtype: object
        """
        return self._cooking_total_xp

    @cooking_total_xp.setter
    def cooking_total_xp(self, cooking_total_xp):
        """Sets the cooking_total_xp of this CharacterLeaderboardSchema.

        Cooking total xp.  # noqa: E501

        :param cooking_total_xp: The cooking_total_xp of this CharacterLeaderboardSchema.  # noqa: E501
        :type: object
        """
        if cooking_total_xp is None:
            raise ValueError("Invalid value for `cooking_total_xp`, must not be `None`")  # noqa: E501

        self._cooking_total_xp = cooking_total_xp

    @property
    def gold(self):
        """Gets the gold of this CharacterLeaderboardSchema.  # noqa: E501

        The numbers of golds on this character.  # noqa: E501

        :return: The gold of this CharacterLeaderboardSchema.  # noqa: E501
        :rtype: object
        """
        return self._gold

    @gold.setter
    def gold(self, gold):
        """Sets the gold of this CharacterLeaderboardSchema.

        The numbers of golds on this character.  # noqa: E501

        :param gold: The gold of this CharacterLeaderboardSchema.  # noqa: E501
        :type: object
        """
        if gold is None:
            raise ValueError("Invalid value for `gold`, must not be `None`")  # noqa: E501

        self._gold = gold

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CharacterLeaderboardSchema, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CharacterLeaderboardSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
