# coding: utf-8

"""
    Artifacts API

     Artifacts is an API-based MMO game where you can manage 5 characters to explore, fight, gather resources, craft items and much more.  Website: https://artifactsmmo.com/  Documentation: https://docs.artifactsmmo.com/  OpenAPI Spec: https://api.artifactsmmo.com/openapi.json   # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BlockedHitsSchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fire': 'object',
        'earth': 'object',
        'water': 'object',
        'air': 'object',
        'total': 'object'
    }

    attribute_map = {
        'fire': 'fire',
        'earth': 'earth',
        'water': 'water',
        'air': 'air',
        'total': 'total'
    }

    def __init__(self, fire=None, earth=None, water=None, air=None, total=None):  # noqa: E501
        """BlockedHitsSchema - a model defined in Swagger"""  # noqa: E501
        self._fire = None
        self._earth = None
        self._water = None
        self._air = None
        self._total = None
        self.discriminator = None
        self.fire = fire
        self.earth = earth
        self.water = water
        self.air = air
        self.total = total

    @property
    def fire(self):
        """Gets the fire of this BlockedHitsSchema.  # noqa: E501

        The amount of fire hits blocked.  # noqa: E501

        :return: The fire of this BlockedHitsSchema.  # noqa: E501
        :rtype: object
        """
        return self._fire

    @fire.setter
    def fire(self, fire):
        """Sets the fire of this BlockedHitsSchema.

        The amount of fire hits blocked.  # noqa: E501

        :param fire: The fire of this BlockedHitsSchema.  # noqa: E501
        :type: object
        """
        if fire is None:
            raise ValueError("Invalid value for `fire`, must not be `None`")  # noqa: E501

        self._fire = fire

    @property
    def earth(self):
        """Gets the earth of this BlockedHitsSchema.  # noqa: E501

        The amount of earth hits blocked.  # noqa: E501

        :return: The earth of this BlockedHitsSchema.  # noqa: E501
        :rtype: object
        """
        return self._earth

    @earth.setter
    def earth(self, earth):
        """Sets the earth of this BlockedHitsSchema.

        The amount of earth hits blocked.  # noqa: E501

        :param earth: The earth of this BlockedHitsSchema.  # noqa: E501
        :type: object
        """
        if earth is None:
            raise ValueError("Invalid value for `earth`, must not be `None`")  # noqa: E501

        self._earth = earth

    @property
    def water(self):
        """Gets the water of this BlockedHitsSchema.  # noqa: E501

        The amount of water hits blocked.  # noqa: E501

        :return: The water of this BlockedHitsSchema.  # noqa: E501
        :rtype: object
        """
        return self._water

    @water.setter
    def water(self, water):
        """Sets the water of this BlockedHitsSchema.

        The amount of water hits blocked.  # noqa: E501

        :param water: The water of this BlockedHitsSchema.  # noqa: E501
        :type: object
        """
        if water is None:
            raise ValueError("Invalid value for `water`, must not be `None`")  # noqa: E501

        self._water = water

    @property
    def air(self):
        """Gets the air of this BlockedHitsSchema.  # noqa: E501

        The amount of air hits blocked.  # noqa: E501

        :return: The air of this BlockedHitsSchema.  # noqa: E501
        :rtype: object
        """
        return self._air

    @air.setter
    def air(self, air):
        """Sets the air of this BlockedHitsSchema.

        The amount of air hits blocked.  # noqa: E501

        :param air: The air of this BlockedHitsSchema.  # noqa: E501
        :type: object
        """
        if air is None:
            raise ValueError("Invalid value for `air`, must not be `None`")  # noqa: E501

        self._air = air

    @property
    def total(self):
        """Gets the total of this BlockedHitsSchema.  # noqa: E501

        The amount of total hits blocked.  # noqa: E501

        :return: The total of this BlockedHitsSchema.  # noqa: E501
        :rtype: object
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this BlockedHitsSchema.

        The amount of total hits blocked.  # noqa: E501

        :param total: The total of this BlockedHitsSchema.  # noqa: E501
        :type: object
        """
        if total is None:
            raise ValueError("Invalid value for `total`, must not be `None`")  # noqa: E501

        self._total = total

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BlockedHitsSchema, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BlockedHitsSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
