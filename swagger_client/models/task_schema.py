# coding: utf-8

"""
    Artifacts API

     Artifacts is an API-based MMO game where you can manage 5 characters to explore, fight, gather resources, craft items and much more.  Website: https://artifactsmmo.com/  Documentation: https://docs.artifactsmmo.com/  OpenAPI Spec: https://api.artifactsmmo.com/openapi.json   # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TaskSchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'code': 'object',
        'type': 'object',
        'total': 'object'
    }

    attribute_map = {
        'code': 'code',
        'type': 'type',
        'total': 'total'
    }

    def __init__(self, code=None, type=None, total=None):  # noqa: E501
        """TaskSchema - a model defined in Swagger"""  # noqa: E501
        self._code = None
        self._type = None
        self._total = None
        self.discriminator = None
        self.code = code
        self.type = type
        self.total = total

    @property
    def code(self):
        """Gets the code of this TaskSchema.  # noqa: E501

        Task objective.  # noqa: E501

        :return: The code of this TaskSchema.  # noqa: E501
        :rtype: object
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this TaskSchema.

        Task objective.  # noqa: E501

        :param code: The code of this TaskSchema.  # noqa: E501
        :type: object
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501

        self._code = code

    @property
    def type(self):
        """Gets the type of this TaskSchema.  # noqa: E501

        The type of task.  # noqa: E501

        :return: The type of this TaskSchema.  # noqa: E501
        :rtype: object
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TaskSchema.

        The type of task.  # noqa: E501

        :param type: The type of this TaskSchema.  # noqa: E501
        :type: object
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def total(self):
        """Gets the total of this TaskSchema.  # noqa: E501

        The total required to complete the task.  # noqa: E501

        :return: The total of this TaskSchema.  # noqa: E501
        :rtype: object
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this TaskSchema.

        The total required to complete the task.  # noqa: E501

        :param total: The total of this TaskSchema.  # noqa: E501
        :type: object
        """
        if total is None:
            raise ValueError("Invalid value for `total`, must not be `None`")  # noqa: E501

        self._total = total

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaskSchema, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
