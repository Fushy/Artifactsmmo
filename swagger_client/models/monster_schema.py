# coding: utf-8

"""
    Artifacts API

     Artifacts is an API-based MMO game where you can manage 5 characters to explore, fight, gather resources, craft items and much more.  Website: https://artifactsmmo.com/  Documentation: https://docs.artifactsmmo.com/  OpenAPI Spec: https://api.artifactsmmo.com/openapi.json   # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MonsterSchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'object',
        'code': 'object',
        'level': 'object',
        'hp': 'object',
        'attack_fire': 'object',
        'attack_earth': 'object',
        'attack_water': 'object',
        'attack_air': 'object',
        'res_fire': 'object',
        'res_earth': 'object',
        'res_water': 'object',
        'res_air': 'object',
        'min_gold': 'object',
        'max_gold': 'object',
        'drops': 'object'
    }

    attribute_map = {
        'name': 'name',
        'code': 'code',
        'level': 'level',
        'hp': 'hp',
        'attack_fire': 'attack_fire',
        'attack_earth': 'attack_earth',
        'attack_water': 'attack_water',
        'attack_air': 'attack_air',
        'res_fire': 'res_fire',
        'res_earth': 'res_earth',
        'res_water': 'res_water',
        'res_air': 'res_air',
        'min_gold': 'min_gold',
        'max_gold': 'max_gold',
        'drops': 'drops'
    }

    def __init__(self, name=None, code=None, level=None, hp=None, attack_fire=None, attack_earth=None, attack_water=None, attack_air=None, res_fire=None, res_earth=None, res_water=None, res_air=None, min_gold=None, max_gold=None, drops=None):  # noqa: E501
        """MonsterSchema - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._code = None
        self._level = None
        self._hp = None
        self._attack_fire = None
        self._attack_earth = None
        self._attack_water = None
        self._attack_air = None
        self._res_fire = None
        self._res_earth = None
        self._res_water = None
        self._res_air = None
        self._min_gold = None
        self._max_gold = None
        self._drops = None
        self.discriminator = None
        self.name = name
        self.code = code
        self.level = level
        self.hp = hp
        self.attack_fire = attack_fire
        self.attack_earth = attack_earth
        self.attack_water = attack_water
        self.attack_air = attack_air
        self.res_fire = res_fire
        self.res_earth = res_earth
        self.res_water = res_water
        self.res_air = res_air
        self.min_gold = min_gold
        self.max_gold = max_gold
        self.drops = drops

    @property
    def name(self):
        """Gets the name of this MonsterSchema.  # noqa: E501

        Name of the monster.  # noqa: E501

        :return: The name of this MonsterSchema.  # noqa: E501
        :rtype: object
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MonsterSchema.

        Name of the monster.  # noqa: E501

        :param name: The name of this MonsterSchema.  # noqa: E501
        :type: object
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def code(self):
        """Gets the code of this MonsterSchema.  # noqa: E501

        The code of the monster. This is the monster's unique identifier (ID).  # noqa: E501

        :return: The code of this MonsterSchema.  # noqa: E501
        :rtype: object
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this MonsterSchema.

        The code of the monster. This is the monster's unique identifier (ID).  # noqa: E501

        :param code: The code of this MonsterSchema.  # noqa: E501
        :type: object
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501

        self._code = code

    @property
    def level(self):
        """Gets the level of this MonsterSchema.  # noqa: E501

        Monster level.  # noqa: E501

        :return: The level of this MonsterSchema.  # noqa: E501
        :rtype: object
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this MonsterSchema.

        Monster level.  # noqa: E501

        :param level: The level of this MonsterSchema.  # noqa: E501
        :type: object
        """
        if level is None:
            raise ValueError("Invalid value for `level`, must not be `None`")  # noqa: E501

        self._level = level

    @property
    def hp(self):
        """Gets the hp of this MonsterSchema.  # noqa: E501

        Monster hit points.  # noqa: E501

        :return: The hp of this MonsterSchema.  # noqa: E501
        :rtype: object
        """
        return self._hp

    @hp.setter
    def hp(self, hp):
        """Sets the hp of this MonsterSchema.

        Monster hit points.  # noqa: E501

        :param hp: The hp of this MonsterSchema.  # noqa: E501
        :type: object
        """
        if hp is None:
            raise ValueError("Invalid value for `hp`, must not be `None`")  # noqa: E501

        self._hp = hp

    @property
    def attack_fire(self):
        """Gets the attack_fire of this MonsterSchema.  # noqa: E501

        Monster fire attack.  # noqa: E501

        :return: The attack_fire of this MonsterSchema.  # noqa: E501
        :rtype: object
        """
        return self._attack_fire

    @attack_fire.setter
    def attack_fire(self, attack_fire):
        """Sets the attack_fire of this MonsterSchema.

        Monster fire attack.  # noqa: E501

        :param attack_fire: The attack_fire of this MonsterSchema.  # noqa: E501
        :type: object
        """
        if attack_fire is None:
            raise ValueError("Invalid value for `attack_fire`, must not be `None`")  # noqa: E501

        self._attack_fire = attack_fire

    @property
    def attack_earth(self):
        """Gets the attack_earth of this MonsterSchema.  # noqa: E501

        Monster earth attack.  # noqa: E501

        :return: The attack_earth of this MonsterSchema.  # noqa: E501
        :rtype: object
        """
        return self._attack_earth

    @attack_earth.setter
    def attack_earth(self, attack_earth):
        """Sets the attack_earth of this MonsterSchema.

        Monster earth attack.  # noqa: E501

        :param attack_earth: The attack_earth of this MonsterSchema.  # noqa: E501
        :type: object
        """
        if attack_earth is None:
            raise ValueError("Invalid value for `attack_earth`, must not be `None`")  # noqa: E501

        self._attack_earth = attack_earth

    @property
    def attack_water(self):
        """Gets the attack_water of this MonsterSchema.  # noqa: E501

        Monster water attack.  # noqa: E501

        :return: The attack_water of this MonsterSchema.  # noqa: E501
        :rtype: object
        """
        return self._attack_water

    @attack_water.setter
    def attack_water(self, attack_water):
        """Sets the attack_water of this MonsterSchema.

        Monster water attack.  # noqa: E501

        :param attack_water: The attack_water of this MonsterSchema.  # noqa: E501
        :type: object
        """
        if attack_water is None:
            raise ValueError("Invalid value for `attack_water`, must not be `None`")  # noqa: E501

        self._attack_water = attack_water

    @property
    def attack_air(self):
        """Gets the attack_air of this MonsterSchema.  # noqa: E501

        Monster air attack.  # noqa: E501

        :return: The attack_air of this MonsterSchema.  # noqa: E501
        :rtype: object
        """
        return self._attack_air

    @attack_air.setter
    def attack_air(self, attack_air):
        """Sets the attack_air of this MonsterSchema.

        Monster air attack.  # noqa: E501

        :param attack_air: The attack_air of this MonsterSchema.  # noqa: E501
        :type: object
        """
        if attack_air is None:
            raise ValueError("Invalid value for `attack_air`, must not be `None`")  # noqa: E501

        self._attack_air = attack_air

    @property
    def res_fire(self):
        """Gets the res_fire of this MonsterSchema.  # noqa: E501

        Monster % fire resistance.  # noqa: E501

        :return: The res_fire of this MonsterSchema.  # noqa: E501
        :rtype: object
        """
        return self._res_fire

    @res_fire.setter
    def res_fire(self, res_fire):
        """Sets the res_fire of this MonsterSchema.

        Monster % fire resistance.  # noqa: E501

        :param res_fire: The res_fire of this MonsterSchema.  # noqa: E501
        :type: object
        """
        if res_fire is None:
            raise ValueError("Invalid value for `res_fire`, must not be `None`")  # noqa: E501

        self._res_fire = res_fire

    @property
    def res_earth(self):
        """Gets the res_earth of this MonsterSchema.  # noqa: E501

        Monster % earth resistance.  # noqa: E501

        :return: The res_earth of this MonsterSchema.  # noqa: E501
        :rtype: object
        """
        return self._res_earth

    @res_earth.setter
    def res_earth(self, res_earth):
        """Sets the res_earth of this MonsterSchema.

        Monster % earth resistance.  # noqa: E501

        :param res_earth: The res_earth of this MonsterSchema.  # noqa: E501
        :type: object
        """
        if res_earth is None:
            raise ValueError("Invalid value for `res_earth`, must not be `None`")  # noqa: E501

        self._res_earth = res_earth

    @property
    def res_water(self):
        """Gets the res_water of this MonsterSchema.  # noqa: E501

        Monster % water resistance.  # noqa: E501

        :return: The res_water of this MonsterSchema.  # noqa: E501
        :rtype: object
        """
        return self._res_water

    @res_water.setter
    def res_water(self, res_water):
        """Sets the res_water of this MonsterSchema.

        Monster % water resistance.  # noqa: E501

        :param res_water: The res_water of this MonsterSchema.  # noqa: E501
        :type: object
        """
        if res_water is None:
            raise ValueError("Invalid value for `res_water`, must not be `None`")  # noqa: E501

        self._res_water = res_water

    @property
    def res_air(self):
        """Gets the res_air of this MonsterSchema.  # noqa: E501

        Monster % air resistance.  # noqa: E501

        :return: The res_air of this MonsterSchema.  # noqa: E501
        :rtype: object
        """
        return self._res_air

    @res_air.setter
    def res_air(self, res_air):
        """Sets the res_air of this MonsterSchema.

        Monster % air resistance.  # noqa: E501

        :param res_air: The res_air of this MonsterSchema.  # noqa: E501
        :type: object
        """
        if res_air is None:
            raise ValueError("Invalid value for `res_air`, must not be `None`")  # noqa: E501

        self._res_air = res_air

    @property
    def min_gold(self):
        """Gets the min_gold of this MonsterSchema.  # noqa: E501

        Monster minimum gold drop.   # noqa: E501

        :return: The min_gold of this MonsterSchema.  # noqa: E501
        :rtype: object
        """
        return self._min_gold

    @min_gold.setter
    def min_gold(self, min_gold):
        """Sets the min_gold of this MonsterSchema.

        Monster minimum gold drop.   # noqa: E501

        :param min_gold: The min_gold of this MonsterSchema.  # noqa: E501
        :type: object
        """
        if min_gold is None:
            raise ValueError("Invalid value for `min_gold`, must not be `None`")  # noqa: E501

        self._min_gold = min_gold

    @property
    def max_gold(self):
        """Gets the max_gold of this MonsterSchema.  # noqa: E501

        Monster maximum gold drop.   # noqa: E501

        :return: The max_gold of this MonsterSchema.  # noqa: E501
        :rtype: object
        """
        return self._max_gold

    @max_gold.setter
    def max_gold(self, max_gold):
        """Sets the max_gold of this MonsterSchema.

        Monster maximum gold drop.   # noqa: E501

        :param max_gold: The max_gold of this MonsterSchema.  # noqa: E501
        :type: object
        """
        if max_gold is None:
            raise ValueError("Invalid value for `max_gold`, must not be `None`")  # noqa: E501

        self._max_gold = max_gold

    @property
    def drops(self):
        """Gets the drops of this MonsterSchema.  # noqa: E501

        Monster drops. This is a list of items that the monster drops after killing the monster.   # noqa: E501

        :return: The drops of this MonsterSchema.  # noqa: E501
        :rtype: object
        """
        return self._drops

    @drops.setter
    def drops(self, drops):
        """Sets the drops of this MonsterSchema.

        Monster drops. This is a list of items that the monster drops after killing the monster.   # noqa: E501

        :param drops: The drops of this MonsterSchema.  # noqa: E501
        :type: object
        """
        if drops is None:
            raise ValueError("Invalid value for `drops`, must not be `None`")  # noqa: E501

        self._drops = drops

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MonsterSchema, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MonsterSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
