# coding: utf-8

"""
    Artifacts API

     Artifacts is an API-based MMO game where you can manage 5 characters to explore, fight, gather resources, craft items and much more.  Website: https://artifactsmmo.com/  Documentation: https://docs.artifactsmmo.com/  OpenAPI Spec: https://api.artifactsmmo.com/openapi.json   # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CharacterSchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'object',
        'skin': 'object',
        'level': 'object',
        'xp': 'object',
        'max_xp': 'object',
        'achievements_points': 'object',
        'gold': 'object',
        'speed': 'object',
        'mining_level': 'object',
        'mining_xp': 'object',
        'mining_max_xp': 'object',
        'woodcutting_level': 'object',
        'woodcutting_xp': 'object',
        'woodcutting_max_xp': 'object',
        'fishing_level': 'object',
        'fishing_xp': 'object',
        'fishing_max_xp': 'object',
        'weaponcrafting_level': 'object',
        'weaponcrafting_xp': 'object',
        'weaponcrafting_max_xp': 'object',
        'gearcrafting_level': 'object',
        'gearcrafting_xp': 'object',
        'gearcrafting_max_xp': 'object',
        'jewelrycrafting_level': 'object',
        'jewelrycrafting_xp': 'object',
        'jewelrycrafting_max_xp': 'object',
        'cooking_level': 'object',
        'cooking_xp': 'object',
        'cooking_max_xp': 'object',
        'hp': 'object',
        'haste': 'object',
        'critical_strike': 'object',
        'stamina': 'object',
        'attack_fire': 'object',
        'attack_earth': 'object',
        'attack_water': 'object',
        'attack_air': 'object',
        'dmg_fire': 'object',
        'dmg_earth': 'object',
        'dmg_water': 'object',
        'dmg_air': 'object',
        'res_fire': 'object',
        'res_earth': 'object',
        'res_water': 'object',
        'res_air': 'object',
        'x': 'object',
        'y': 'object',
        'cooldown': 'object',
        'cooldown_expiration': 'object',
        'weapon_slot': 'object',
        'shield_slot': 'object',
        'helmet_slot': 'object',
        'body_armor_slot': 'object',
        'leg_armor_slot': 'object',
        'boots_slot': 'object',
        'ring1_slot': 'object',
        'ring2_slot': 'object',
        'amulet_slot': 'object',
        'artifact1_slot': 'object',
        'artifact2_slot': 'object',
        'artifact3_slot': 'object',
        'consumable1_slot': 'object',
        'consumable1_slot_quantity': 'object',
        'consumable2_slot': 'object',
        'consumable2_slot_quantity': 'object',
        'task': 'object',
        'task_type': 'object',
        'task_progress': 'object',
        'task_total': 'object',
        'inventory_max_items': 'object',
        'inventory': 'object'
    }

    attribute_map = {
        'name': 'name',
        'skin': 'skin',
        'level': 'level',
        'xp': 'xp',
        'max_xp': 'max_xp',
        'achievements_points': 'achievements_points',
        'gold': 'gold',
        'speed': 'speed',
        'mining_level': 'mining_level',
        'mining_xp': 'mining_xp',
        'mining_max_xp': 'mining_max_xp',
        'woodcutting_level': 'woodcutting_level',
        'woodcutting_xp': 'woodcutting_xp',
        'woodcutting_max_xp': 'woodcutting_max_xp',
        'fishing_level': 'fishing_level',
        'fishing_xp': 'fishing_xp',
        'fishing_max_xp': 'fishing_max_xp',
        'weaponcrafting_level': 'weaponcrafting_level',
        'weaponcrafting_xp': 'weaponcrafting_xp',
        'weaponcrafting_max_xp': 'weaponcrafting_max_xp',
        'gearcrafting_level': 'gearcrafting_level',
        'gearcrafting_xp': 'gearcrafting_xp',
        'gearcrafting_max_xp': 'gearcrafting_max_xp',
        'jewelrycrafting_level': 'jewelrycrafting_level',
        'jewelrycrafting_xp': 'jewelrycrafting_xp',
        'jewelrycrafting_max_xp': 'jewelrycrafting_max_xp',
        'cooking_level': 'cooking_level',
        'cooking_xp': 'cooking_xp',
        'cooking_max_xp': 'cooking_max_xp',
        'hp': 'hp',
        'haste': 'haste',
        'critical_strike': 'critical_strike',
        'stamina': 'stamina',
        'attack_fire': 'attack_fire',
        'attack_earth': 'attack_earth',
        'attack_water': 'attack_water',
        'attack_air': 'attack_air',
        'dmg_fire': 'dmg_fire',
        'dmg_earth': 'dmg_earth',
        'dmg_water': 'dmg_water',
        'dmg_air': 'dmg_air',
        'res_fire': 'res_fire',
        'res_earth': 'res_earth',
        'res_water': 'res_water',
        'res_air': 'res_air',
        'x': 'x',
        'y': 'y',
        'cooldown': 'cooldown',
        'cooldown_expiration': 'cooldown_expiration',
        'weapon_slot': 'weapon_slot',
        'shield_slot': 'shield_slot',
        'helmet_slot': 'helmet_slot',
        'body_armor_slot': 'body_armor_slot',
        'leg_armor_slot': 'leg_armor_slot',
        'boots_slot': 'boots_slot',
        'ring1_slot': 'ring1_slot',
        'ring2_slot': 'ring2_slot',
        'amulet_slot': 'amulet_slot',
        'artifact1_slot': 'artifact1_slot',
        'artifact2_slot': 'artifact2_slot',
        'artifact3_slot': 'artifact3_slot',
        'consumable1_slot': 'consumable1_slot',
        'consumable1_slot_quantity': 'consumable1_slot_quantity',
        'consumable2_slot': 'consumable2_slot',
        'consumable2_slot_quantity': 'consumable2_slot_quantity',
        'task': 'task',
        'task_type': 'task_type',
        'task_progress': 'task_progress',
        'task_total': 'task_total',
        'inventory_max_items': 'inventory_max_items',
        'inventory': 'inventory'
    }

    def __init__(self, name=None, skin=None, level=None, xp=None, max_xp=None, achievements_points=None, gold=None, speed=None, mining_level=None, mining_xp=None, mining_max_xp=None, woodcutting_level=None, woodcutting_xp=None, woodcutting_max_xp=None, fishing_level=None, fishing_xp=None, fishing_max_xp=None, weaponcrafting_level=None, weaponcrafting_xp=None, weaponcrafting_max_xp=None, gearcrafting_level=None, gearcrafting_xp=None, gearcrafting_max_xp=None, jewelrycrafting_level=None, jewelrycrafting_xp=None, jewelrycrafting_max_xp=None, cooking_level=None, cooking_xp=None, cooking_max_xp=None, hp=None, haste=None, critical_strike=None, stamina=None, attack_fire=None, attack_earth=None, attack_water=None, attack_air=None, dmg_fire=None, dmg_earth=None, dmg_water=None, dmg_air=None, res_fire=None, res_earth=None, res_water=None, res_air=None, x=None, y=None, cooldown=None, cooldown_expiration=None, weapon_slot=None, shield_slot=None, helmet_slot=None, body_armor_slot=None, leg_armor_slot=None, boots_slot=None, ring1_slot=None, ring2_slot=None, amulet_slot=None, artifact1_slot=None, artifact2_slot=None, artifact3_slot=None, consumable1_slot=None, consumable1_slot_quantity=None, consumable2_slot=None, consumable2_slot_quantity=None, task=None, task_type=None, task_progress=None, task_total=None, inventory_max_items=None, inventory=None):  # noqa: E501
        """CharacterSchema - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._skin = None
        self._level = None
        self._xp = None
        self._max_xp = None
        self._achievements_points = None
        self._gold = None
        self._speed = None
        self._mining_level = None
        self._mining_xp = None
        self._mining_max_xp = None
        self._woodcutting_level = None
        self._woodcutting_xp = None
        self._woodcutting_max_xp = None
        self._fishing_level = None
        self._fishing_xp = None
        self._fishing_max_xp = None
        self._weaponcrafting_level = None
        self._weaponcrafting_xp = None
        self._weaponcrafting_max_xp = None
        self._gearcrafting_level = None
        self._gearcrafting_xp = None
        self._gearcrafting_max_xp = None
        self._jewelrycrafting_level = None
        self._jewelrycrafting_xp = None
        self._jewelrycrafting_max_xp = None
        self._cooking_level = None
        self._cooking_xp = None
        self._cooking_max_xp = None
        self._hp = None
        self._haste = None
        self._critical_strike = None
        self._stamina = None
        self._attack_fire = None
        self._attack_earth = None
        self._attack_water = None
        self._attack_air = None
        self._dmg_fire = None
        self._dmg_earth = None
        self._dmg_water = None
        self._dmg_air = None
        self._res_fire = None
        self._res_earth = None
        self._res_water = None
        self._res_air = None
        self._x = None
        self._y = None
        self._cooldown = None
        self._cooldown_expiration = None
        self._weapon_slot = None
        self._shield_slot = None
        self._helmet_slot = None
        self._body_armor_slot = None
        self._leg_armor_slot = None
        self._boots_slot = None
        self._ring1_slot = None
        self._ring2_slot = None
        self._amulet_slot = None
        self._artifact1_slot = None
        self._artifact2_slot = None
        self._artifact3_slot = None
        self._consumable1_slot = None
        self._consumable1_slot_quantity = None
        self._consumable2_slot = None
        self._consumable2_slot_quantity = None
        self._task = None
        self._task_type = None
        self._task_progress = None
        self._task_total = None
        self._inventory_max_items = None
        self._inventory = None
        self.discriminator = None
        self.name = name
        self.skin = skin
        self.level = level
        self.xp = xp
        self.max_xp = max_xp
        self.achievements_points = achievements_points
        self.gold = gold
        self.speed = speed
        self.mining_level = mining_level
        self.mining_xp = mining_xp
        self.mining_max_xp = mining_max_xp
        self.woodcutting_level = woodcutting_level
        self.woodcutting_xp = woodcutting_xp
        self.woodcutting_max_xp = woodcutting_max_xp
        self.fishing_level = fishing_level
        self.fishing_xp = fishing_xp
        self.fishing_max_xp = fishing_max_xp
        self.weaponcrafting_level = weaponcrafting_level
        self.weaponcrafting_xp = weaponcrafting_xp
        self.weaponcrafting_max_xp = weaponcrafting_max_xp
        self.gearcrafting_level = gearcrafting_level
        self.gearcrafting_xp = gearcrafting_xp
        self.gearcrafting_max_xp = gearcrafting_max_xp
        self.jewelrycrafting_level = jewelrycrafting_level
        self.jewelrycrafting_xp = jewelrycrafting_xp
        self.jewelrycrafting_max_xp = jewelrycrafting_max_xp
        self.cooking_level = cooking_level
        self.cooking_xp = cooking_xp
        self.cooking_max_xp = cooking_max_xp
        self.hp = hp
        self.haste = haste
        self.critical_strike = critical_strike
        self.stamina = stamina
        self.attack_fire = attack_fire
        self.attack_earth = attack_earth
        self.attack_water = attack_water
        self.attack_air = attack_air
        self.dmg_fire = dmg_fire
        self.dmg_earth = dmg_earth
        self.dmg_water = dmg_water
        self.dmg_air = dmg_air
        self.res_fire = res_fire
        self.res_earth = res_earth
        self.res_water = res_water
        self.res_air = res_air
        self.x = x
        self.y = y
        self.cooldown = cooldown
        if cooldown_expiration is not None:
            self.cooldown_expiration = cooldown_expiration
        self.weapon_slot = weapon_slot
        self.shield_slot = shield_slot
        self.helmet_slot = helmet_slot
        self.body_armor_slot = body_armor_slot
        self.leg_armor_slot = leg_armor_slot
        self.boots_slot = boots_slot
        self.ring1_slot = ring1_slot
        self.ring2_slot = ring2_slot
        self.amulet_slot = amulet_slot
        self.artifact1_slot = artifact1_slot
        self.artifact2_slot = artifact2_slot
        self.artifact3_slot = artifact3_slot
        self.consumable1_slot = consumable1_slot
        self.consumable1_slot_quantity = consumable1_slot_quantity
        self.consumable2_slot = consumable2_slot
        self.consumable2_slot_quantity = consumable2_slot_quantity
        self.task = task
        self.task_type = task_type
        self.task_progress = task_progress
        self.task_total = task_total
        self.inventory_max_items = inventory_max_items
        if inventory is not None:
            self.inventory = inventory

    @property
    def name(self):
        """Gets the name of this CharacterSchema.  # noqa: E501

        Name of the character.  # noqa: E501

        :return: The name of this CharacterSchema.  # noqa: E501
        :rtype: object
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CharacterSchema.

        Name of the character.  # noqa: E501

        :param name: The name of this CharacterSchema.  # noqa: E501
        :type: object
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def skin(self):
        """Gets the skin of this CharacterSchema.  # noqa: E501

        Character skin code.  # noqa: E501

        :return: The skin of this CharacterSchema.  # noqa: E501
        :rtype: object
        """
        return self._skin

    @skin.setter
    def skin(self, skin):
        """Sets the skin of this CharacterSchema.

        Character skin code.  # noqa: E501

        :param skin: The skin of this CharacterSchema.  # noqa: E501
        :type: object
        """
        if skin is None:
            raise ValueError("Invalid value for `skin`, must not be `None`")  # noqa: E501

        self._skin = skin

    @property
    def level(self):
        """Gets the level of this CharacterSchema.  # noqa: E501

        Combat level.  # noqa: E501

        :return: The level of this CharacterSchema.  # noqa: E501
        :rtype: object
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this CharacterSchema.

        Combat level.  # noqa: E501

        :param level: The level of this CharacterSchema.  # noqa: E501
        :type: object
        """
        if level is None:
            raise ValueError("Invalid value for `level`, must not be `None`")  # noqa: E501

        self._level = level

    @property
    def xp(self):
        """Gets the xp of this CharacterSchema.  # noqa: E501

        The current xp level of the combat level.  # noqa: E501

        :return: The xp of this CharacterSchema.  # noqa: E501
        :rtype: object
        """
        return self._xp

    @xp.setter
    def xp(self, xp):
        """Sets the xp of this CharacterSchema.

        The current xp level of the combat level.  # noqa: E501

        :param xp: The xp of this CharacterSchema.  # noqa: E501
        :type: object
        """
        if xp is None:
            raise ValueError("Invalid value for `xp`, must not be `None`")  # noqa: E501

        self._xp = xp

    @property
    def max_xp(self):
        """Gets the max_xp of this CharacterSchema.  # noqa: E501

        XP required to level up the character.  # noqa: E501

        :return: The max_xp of this CharacterSchema.  # noqa: E501
        :rtype: object
        """
        return self._max_xp

    @max_xp.setter
    def max_xp(self, max_xp):
        """Sets the max_xp of this CharacterSchema.

        XP required to level up the character.  # noqa: E501

        :param max_xp: The max_xp of this CharacterSchema.  # noqa: E501
        :type: object
        """
        if max_xp is None:
            raise ValueError("Invalid value for `max_xp`, must not be `None`")  # noqa: E501

        self._max_xp = max_xp

    @property
    def achievements_points(self):
        """Gets the achievements_points of this CharacterSchema.  # noqa: E501

        achievements points.  # noqa: E501

        :return: The achievements_points of this CharacterSchema.  # noqa: E501
        :rtype: object
        """
        return self._achievements_points

    @achievements_points.setter
    def achievements_points(self, achievements_points):
        """Sets the achievements_points of this CharacterSchema.

        achievements points.  # noqa: E501

        :param achievements_points: The achievements_points of this CharacterSchema.  # noqa: E501
        :type: object
        """
        if achievements_points is None:
            raise ValueError("Invalid value for `achievements_points`, must not be `None`")  # noqa: E501

        self._achievements_points = achievements_points

    @property
    def gold(self):
        """Gets the gold of this CharacterSchema.  # noqa: E501

        The numbers of golds on this character.  # noqa: E501

        :return: The gold of this CharacterSchema.  # noqa: E501
        :rtype: object
        """
        return self._gold

    @gold.setter
    def gold(self, gold):
        """Sets the gold of this CharacterSchema.

        The numbers of golds on this character.  # noqa: E501

        :param gold: The gold of this CharacterSchema.  # noqa: E501
        :type: object
        """
        if gold is None:
            raise ValueError("Invalid value for `gold`, must not be `None`")  # noqa: E501

        self._gold = gold

    @property
    def speed(self):
        """Gets the speed of this CharacterSchema.  # noqa: E501

        *Not available, on the roadmap. Character movement speed.  # noqa: E501

        :return: The speed of this CharacterSchema.  # noqa: E501
        :rtype: object
        """
        return self._speed

    @speed.setter
    def speed(self, speed):
        """Sets the speed of this CharacterSchema.

        *Not available, on the roadmap. Character movement speed.  # noqa: E501

        :param speed: The speed of this CharacterSchema.  # noqa: E501
        :type: object
        """
        if speed is None:
            raise ValueError("Invalid value for `speed`, must not be `None`")  # noqa: E501

        self._speed = speed

    @property
    def mining_level(self):
        """Gets the mining_level of this CharacterSchema.  # noqa: E501

        Mining level.  # noqa: E501

        :return: The mining_level of this CharacterSchema.  # noqa: E501
        :rtype: object
        """
        return self._mining_level

    @mining_level.setter
    def mining_level(self, mining_level):
        """Sets the mining_level of this CharacterSchema.

        Mining level.  # noqa: E501

        :param mining_level: The mining_level of this CharacterSchema.  # noqa: E501
        :type: object
        """
        if mining_level is None:
            raise ValueError("Invalid value for `mining_level`, must not be `None`")  # noqa: E501

        self._mining_level = mining_level

    @property
    def mining_xp(self):
        """Gets the mining_xp of this CharacterSchema.  # noqa: E501

        The current xp level of the Mining skill.  # noqa: E501

        :return: The mining_xp of this CharacterSchema.  # noqa: E501
        :rtype: object
        """
        return self._mining_xp

    @mining_xp.setter
    def mining_xp(self, mining_xp):
        """Sets the mining_xp of this CharacterSchema.

        The current xp level of the Mining skill.  # noqa: E501

        :param mining_xp: The mining_xp of this CharacterSchema.  # noqa: E501
        :type: object
        """
        if mining_xp is None:
            raise ValueError("Invalid value for `mining_xp`, must not be `None`")  # noqa: E501

        self._mining_xp = mining_xp

    @property
    def mining_max_xp(self):
        """Gets the mining_max_xp of this CharacterSchema.  # noqa: E501

        Mining XP required to level up the skill.  # noqa: E501

        :return: The mining_max_xp of this CharacterSchema.  # noqa: E501
        :rtype: object
        """
        return self._mining_max_xp

    @mining_max_xp.setter
    def mining_max_xp(self, mining_max_xp):
        """Sets the mining_max_xp of this CharacterSchema.

        Mining XP required to level up the skill.  # noqa: E501

        :param mining_max_xp: The mining_max_xp of this CharacterSchema.  # noqa: E501
        :type: object
        """
        if mining_max_xp is None:
            raise ValueError("Invalid value for `mining_max_xp`, must not be `None`")  # noqa: E501

        self._mining_max_xp = mining_max_xp

    @property
    def woodcutting_level(self):
        """Gets the woodcutting_level of this CharacterSchema.  # noqa: E501

        Woodcutting level.  # noqa: E501

        :return: The woodcutting_level of this CharacterSchema.  # noqa: E501
        :rtype: object
        """
        return self._woodcutting_level

    @woodcutting_level.setter
    def woodcutting_level(self, woodcutting_level):
        """Sets the woodcutting_level of this CharacterSchema.

        Woodcutting level.  # noqa: E501

        :param woodcutting_level: The woodcutting_level of this CharacterSchema.  # noqa: E501
        :type: object
        """
        if woodcutting_level is None:
            raise ValueError("Invalid value for `woodcutting_level`, must not be `None`")  # noqa: E501

        self._woodcutting_level = woodcutting_level

    @property
    def woodcutting_xp(self):
        """Gets the woodcutting_xp of this CharacterSchema.  # noqa: E501

        The current xp level of the Woodcutting skill.  # noqa: E501

        :return: The woodcutting_xp of this CharacterSchema.  # noqa: E501
        :rtype: object
        """
        return self._woodcutting_xp

    @woodcutting_xp.setter
    def woodcutting_xp(self, woodcutting_xp):
        """Sets the woodcutting_xp of this CharacterSchema.

        The current xp level of the Woodcutting skill.  # noqa: E501

        :param woodcutting_xp: The woodcutting_xp of this CharacterSchema.  # noqa: E501
        :type: object
        """
        if woodcutting_xp is None:
            raise ValueError("Invalid value for `woodcutting_xp`, must not be `None`")  # noqa: E501

        self._woodcutting_xp = woodcutting_xp

    @property
    def woodcutting_max_xp(self):
        """Gets the woodcutting_max_xp of this CharacterSchema.  # noqa: E501

        Woodcutting XP required to level up the skill.  # noqa: E501

        :return: The woodcutting_max_xp of this CharacterSchema.  # noqa: E501
        :rtype: object
        """
        return self._woodcutting_max_xp

    @woodcutting_max_xp.setter
    def woodcutting_max_xp(self, woodcutting_max_xp):
        """Sets the woodcutting_max_xp of this CharacterSchema.

        Woodcutting XP required to level up the skill.  # noqa: E501

        :param woodcutting_max_xp: The woodcutting_max_xp of this CharacterSchema.  # noqa: E501
        :type: object
        """
        if woodcutting_max_xp is None:
            raise ValueError("Invalid value for `woodcutting_max_xp`, must not be `None`")  # noqa: E501

        self._woodcutting_max_xp = woodcutting_max_xp

    @property
    def fishing_level(self):
        """Gets the fishing_level of this CharacterSchema.  # noqa: E501

        Fishing level.  # noqa: E501

        :return: The fishing_level of this CharacterSchema.  # noqa: E501
        :rtype: object
        """
        return self._fishing_level

    @fishing_level.setter
    def fishing_level(self, fishing_level):
        """Sets the fishing_level of this CharacterSchema.

        Fishing level.  # noqa: E501

        :param fishing_level: The fishing_level of this CharacterSchema.  # noqa: E501
        :type: object
        """
        if fishing_level is None:
            raise ValueError("Invalid value for `fishing_level`, must not be `None`")  # noqa: E501

        self._fishing_level = fishing_level

    @property
    def fishing_xp(self):
        """Gets the fishing_xp of this CharacterSchema.  # noqa: E501

        The current xp level of the Fishing skill.  # noqa: E501

        :return: The fishing_xp of this CharacterSchema.  # noqa: E501
        :rtype: object
        """
        return self._fishing_xp

    @fishing_xp.setter
    def fishing_xp(self, fishing_xp):
        """Sets the fishing_xp of this CharacterSchema.

        The current xp level of the Fishing skill.  # noqa: E501

        :param fishing_xp: The fishing_xp of this CharacterSchema.  # noqa: E501
        :type: object
        """
        if fishing_xp is None:
            raise ValueError("Invalid value for `fishing_xp`, must not be `None`")  # noqa: E501

        self._fishing_xp = fishing_xp

    @property
    def fishing_max_xp(self):
        """Gets the fishing_max_xp of this CharacterSchema.  # noqa: E501

        Fishing XP required to level up the skill.  # noqa: E501

        :return: The fishing_max_xp of this CharacterSchema.  # noqa: E501
        :rtype: object
        """
        return self._fishing_max_xp

    @fishing_max_xp.setter
    def fishing_max_xp(self, fishing_max_xp):
        """Sets the fishing_max_xp of this CharacterSchema.

        Fishing XP required to level up the skill.  # noqa: E501

        :param fishing_max_xp: The fishing_max_xp of this CharacterSchema.  # noqa: E501
        :type: object
        """
        if fishing_max_xp is None:
            raise ValueError("Invalid value for `fishing_max_xp`, must not be `None`")  # noqa: E501

        self._fishing_max_xp = fishing_max_xp

    @property
    def weaponcrafting_level(self):
        """Gets the weaponcrafting_level of this CharacterSchema.  # noqa: E501

        Weaponcrafting level.  # noqa: E501

        :return: The weaponcrafting_level of this CharacterSchema.  # noqa: E501
        :rtype: object
        """
        return self._weaponcrafting_level

    @weaponcrafting_level.setter
    def weaponcrafting_level(self, weaponcrafting_level):
        """Sets the weaponcrafting_level of this CharacterSchema.

        Weaponcrafting level.  # noqa: E501

        :param weaponcrafting_level: The weaponcrafting_level of this CharacterSchema.  # noqa: E501
        :type: object
        """
        if weaponcrafting_level is None:
            raise ValueError("Invalid value for `weaponcrafting_level`, must not be `None`")  # noqa: E501

        self._weaponcrafting_level = weaponcrafting_level

    @property
    def weaponcrafting_xp(self):
        """Gets the weaponcrafting_xp of this CharacterSchema.  # noqa: E501

        The current xp level of the Weaponcrafting skill.  # noqa: E501

        :return: The weaponcrafting_xp of this CharacterSchema.  # noqa: E501
        :rtype: object
        """
        return self._weaponcrafting_xp

    @weaponcrafting_xp.setter
    def weaponcrafting_xp(self, weaponcrafting_xp):
        """Sets the weaponcrafting_xp of this CharacterSchema.

        The current xp level of the Weaponcrafting skill.  # noqa: E501

        :param weaponcrafting_xp: The weaponcrafting_xp of this CharacterSchema.  # noqa: E501
        :type: object
        """
        if weaponcrafting_xp is None:
            raise ValueError("Invalid value for `weaponcrafting_xp`, must not be `None`")  # noqa: E501

        self._weaponcrafting_xp = weaponcrafting_xp

    @property
    def weaponcrafting_max_xp(self):
        """Gets the weaponcrafting_max_xp of this CharacterSchema.  # noqa: E501

        Weaponcrafting XP required to level up the skill.  # noqa: E501

        :return: The weaponcrafting_max_xp of this CharacterSchema.  # noqa: E501
        :rtype: object
        """
        return self._weaponcrafting_max_xp

    @weaponcrafting_max_xp.setter
    def weaponcrafting_max_xp(self, weaponcrafting_max_xp):
        """Sets the weaponcrafting_max_xp of this CharacterSchema.

        Weaponcrafting XP required to level up the skill.  # noqa: E501

        :param weaponcrafting_max_xp: The weaponcrafting_max_xp of this CharacterSchema.  # noqa: E501
        :type: object
        """
        if weaponcrafting_max_xp is None:
            raise ValueError("Invalid value for `weaponcrafting_max_xp`, must not be `None`")  # noqa: E501

        self._weaponcrafting_max_xp = weaponcrafting_max_xp

    @property
    def gearcrafting_level(self):
        """Gets the gearcrafting_level of this CharacterSchema.  # noqa: E501

        Gearcrafting level.  # noqa: E501

        :return: The gearcrafting_level of this CharacterSchema.  # noqa: E501
        :rtype: object
        """
        return self._gearcrafting_level

    @gearcrafting_level.setter
    def gearcrafting_level(self, gearcrafting_level):
        """Sets the gearcrafting_level of this CharacterSchema.

        Gearcrafting level.  # noqa: E501

        :param gearcrafting_level: The gearcrafting_level of this CharacterSchema.  # noqa: E501
        :type: object
        """
        if gearcrafting_level is None:
            raise ValueError("Invalid value for `gearcrafting_level`, must not be `None`")  # noqa: E501

        self._gearcrafting_level = gearcrafting_level

    @property
    def gearcrafting_xp(self):
        """Gets the gearcrafting_xp of this CharacterSchema.  # noqa: E501

        The current xp level of the Gearcrafting skill.  # noqa: E501

        :return: The gearcrafting_xp of this CharacterSchema.  # noqa: E501
        :rtype: object
        """
        return self._gearcrafting_xp

    @gearcrafting_xp.setter
    def gearcrafting_xp(self, gearcrafting_xp):
        """Sets the gearcrafting_xp of this CharacterSchema.

        The current xp level of the Gearcrafting skill.  # noqa: E501

        :param gearcrafting_xp: The gearcrafting_xp of this CharacterSchema.  # noqa: E501
        :type: object
        """
        if gearcrafting_xp is None:
            raise ValueError("Invalid value for `gearcrafting_xp`, must not be `None`")  # noqa: E501

        self._gearcrafting_xp = gearcrafting_xp

    @property
    def gearcrafting_max_xp(self):
        """Gets the gearcrafting_max_xp of this CharacterSchema.  # noqa: E501

        Gearcrafting XP required to level up the skill.  # noqa: E501

        :return: The gearcrafting_max_xp of this CharacterSchema.  # noqa: E501
        :rtype: object
        """
        return self._gearcrafting_max_xp

    @gearcrafting_max_xp.setter
    def gearcrafting_max_xp(self, gearcrafting_max_xp):
        """Sets the gearcrafting_max_xp of this CharacterSchema.

        Gearcrafting XP required to level up the skill.  # noqa: E501

        :param gearcrafting_max_xp: The gearcrafting_max_xp of this CharacterSchema.  # noqa: E501
        :type: object
        """
        if gearcrafting_max_xp is None:
            raise ValueError("Invalid value for `gearcrafting_max_xp`, must not be `None`")  # noqa: E501

        self._gearcrafting_max_xp = gearcrafting_max_xp

    @property
    def jewelrycrafting_level(self):
        """Gets the jewelrycrafting_level of this CharacterSchema.  # noqa: E501

        Jewelrycrafting level.  # noqa: E501

        :return: The jewelrycrafting_level of this CharacterSchema.  # noqa: E501
        :rtype: object
        """
        return self._jewelrycrafting_level

    @jewelrycrafting_level.setter
    def jewelrycrafting_level(self, jewelrycrafting_level):
        """Sets the jewelrycrafting_level of this CharacterSchema.

        Jewelrycrafting level.  # noqa: E501

        :param jewelrycrafting_level: The jewelrycrafting_level of this CharacterSchema.  # noqa: E501
        :type: object
        """
        if jewelrycrafting_level is None:
            raise ValueError("Invalid value for `jewelrycrafting_level`, must not be `None`")  # noqa: E501

        self._jewelrycrafting_level = jewelrycrafting_level

    @property
    def jewelrycrafting_xp(self):
        """Gets the jewelrycrafting_xp of this CharacterSchema.  # noqa: E501

        The current xp level of the Jewelrycrafting skill.  # noqa: E501

        :return: The jewelrycrafting_xp of this CharacterSchema.  # noqa: E501
        :rtype: object
        """
        return self._jewelrycrafting_xp

    @jewelrycrafting_xp.setter
    def jewelrycrafting_xp(self, jewelrycrafting_xp):
        """Sets the jewelrycrafting_xp of this CharacterSchema.

        The current xp level of the Jewelrycrafting skill.  # noqa: E501

        :param jewelrycrafting_xp: The jewelrycrafting_xp of this CharacterSchema.  # noqa: E501
        :type: object
        """
        if jewelrycrafting_xp is None:
            raise ValueError("Invalid value for `jewelrycrafting_xp`, must not be `None`")  # noqa: E501

        self._jewelrycrafting_xp = jewelrycrafting_xp

    @property
    def jewelrycrafting_max_xp(self):
        """Gets the jewelrycrafting_max_xp of this CharacterSchema.  # noqa: E501

        Jewelrycrafting XP required to level up the skill.  # noqa: E501

        :return: The jewelrycrafting_max_xp of this CharacterSchema.  # noqa: E501
        :rtype: object
        """
        return self._jewelrycrafting_max_xp

    @jewelrycrafting_max_xp.setter
    def jewelrycrafting_max_xp(self, jewelrycrafting_max_xp):
        """Sets the jewelrycrafting_max_xp of this CharacterSchema.

        Jewelrycrafting XP required to level up the skill.  # noqa: E501

        :param jewelrycrafting_max_xp: The jewelrycrafting_max_xp of this CharacterSchema.  # noqa: E501
        :type: object
        """
        if jewelrycrafting_max_xp is None:
            raise ValueError("Invalid value for `jewelrycrafting_max_xp`, must not be `None`")  # noqa: E501

        self._jewelrycrafting_max_xp = jewelrycrafting_max_xp

    @property
    def cooking_level(self):
        """Gets the cooking_level of this CharacterSchema.  # noqa: E501

        The current xp level of the Cooking skill.  # noqa: E501

        :return: The cooking_level of this CharacterSchema.  # noqa: E501
        :rtype: object
        """
        return self._cooking_level

    @cooking_level.setter
    def cooking_level(self, cooking_level):
        """Sets the cooking_level of this CharacterSchema.

        The current xp level of the Cooking skill.  # noqa: E501

        :param cooking_level: The cooking_level of this CharacterSchema.  # noqa: E501
        :type: object
        """
        if cooking_level is None:
            raise ValueError("Invalid value for `cooking_level`, must not be `None`")  # noqa: E501

        self._cooking_level = cooking_level

    @property
    def cooking_xp(self):
        """Gets the cooking_xp of this CharacterSchema.  # noqa: E501

        Cooking XP.  # noqa: E501

        :return: The cooking_xp of this CharacterSchema.  # noqa: E501
        :rtype: object
        """
        return self._cooking_xp

    @cooking_xp.setter
    def cooking_xp(self, cooking_xp):
        """Sets the cooking_xp of this CharacterSchema.

        Cooking XP.  # noqa: E501

        :param cooking_xp: The cooking_xp of this CharacterSchema.  # noqa: E501
        :type: object
        """
        if cooking_xp is None:
            raise ValueError("Invalid value for `cooking_xp`, must not be `None`")  # noqa: E501

        self._cooking_xp = cooking_xp

    @property
    def cooking_max_xp(self):
        """Gets the cooking_max_xp of this CharacterSchema.  # noqa: E501

        Cooking XP required to level up the skill.  # noqa: E501

        :return: The cooking_max_xp of this CharacterSchema.  # noqa: E501
        :rtype: object
        """
        return self._cooking_max_xp

    @cooking_max_xp.setter
    def cooking_max_xp(self, cooking_max_xp):
        """Sets the cooking_max_xp of this CharacterSchema.

        Cooking XP required to level up the skill.  # noqa: E501

        :param cooking_max_xp: The cooking_max_xp of this CharacterSchema.  # noqa: E501
        :type: object
        """
        if cooking_max_xp is None:
            raise ValueError("Invalid value for `cooking_max_xp`, must not be `None`")  # noqa: E501

        self._cooking_max_xp = cooking_max_xp

    @property
    def hp(self):
        """Gets the hp of this CharacterSchema.  # noqa: E501

        Character HP.  # noqa: E501

        :return: The hp of this CharacterSchema.  # noqa: E501
        :rtype: object
        """
        return self._hp

    @hp.setter
    def hp(self, hp):
        """Sets the hp of this CharacterSchema.

        Character HP.  # noqa: E501

        :param hp: The hp of this CharacterSchema.  # noqa: E501
        :type: object
        """
        if hp is None:
            raise ValueError("Invalid value for `hp`, must not be `None`")  # noqa: E501

        self._hp = hp

    @property
    def haste(self):
        """Gets the haste of this CharacterSchema.  # noqa: E501

        *Character Haste. Increase speed attack (reduce fight cooldown)  # noqa: E501

        :return: The haste of this CharacterSchema.  # noqa: E501
        :rtype: object
        """
        return self._haste

    @haste.setter
    def haste(self, haste):
        """Sets the haste of this CharacterSchema.

        *Character Haste. Increase speed attack (reduce fight cooldown)  # noqa: E501

        :param haste: The haste of this CharacterSchema.  # noqa: E501
        :type: object
        """
        if haste is None:
            raise ValueError("Invalid value for `haste`, must not be `None`")  # noqa: E501

        self._haste = haste

    @property
    def critical_strike(self):
        """Gets the critical_strike of this CharacterSchema.  # noqa: E501

        *Not available, on the roadmap. Character Critical   Strike. Critical strikes increase the attack's damage.  # noqa: E501

        :return: The critical_strike of this CharacterSchema.  # noqa: E501
        :rtype: object
        """
        return self._critical_strike

    @critical_strike.setter
    def critical_strike(self, critical_strike):
        """Sets the critical_strike of this CharacterSchema.

        *Not available, on the roadmap. Character Critical   Strike. Critical strikes increase the attack's damage.  # noqa: E501

        :param critical_strike: The critical_strike of this CharacterSchema.  # noqa: E501
        :type: object
        """
        if critical_strike is None:
            raise ValueError("Invalid value for `critical_strike`, must not be `None`")  # noqa: E501

        self._critical_strike = critical_strike

    @property
    def stamina(self):
        """Gets the stamina of this CharacterSchema.  # noqa: E501

        *Not available, on the roadmap. Regenerates life at the start of each turn.  # noqa: E501

        :return: The stamina of this CharacterSchema.  # noqa: E501
        :rtype: object
        """
        return self._stamina

    @stamina.setter
    def stamina(self, stamina):
        """Sets the stamina of this CharacterSchema.

        *Not available, on the roadmap. Regenerates life at the start of each turn.  # noqa: E501

        :param stamina: The stamina of this CharacterSchema.  # noqa: E501
        :type: object
        """
        if stamina is None:
            raise ValueError("Invalid value for `stamina`, must not be `None`")  # noqa: E501

        self._stamina = stamina

    @property
    def attack_fire(self):
        """Gets the attack_fire of this CharacterSchema.  # noqa: E501

        Fire attack.  # noqa: E501

        :return: The attack_fire of this CharacterSchema.  # noqa: E501
        :rtype: object
        """
        return self._attack_fire

    @attack_fire.setter
    def attack_fire(self, attack_fire):
        """Sets the attack_fire of this CharacterSchema.

        Fire attack.  # noqa: E501

        :param attack_fire: The attack_fire of this CharacterSchema.  # noqa: E501
        :type: object
        """
        if attack_fire is None:
            raise ValueError("Invalid value for `attack_fire`, must not be `None`")  # noqa: E501

        self._attack_fire = attack_fire

    @property
    def attack_earth(self):
        """Gets the attack_earth of this CharacterSchema.  # noqa: E501

        Earth attack.  # noqa: E501

        :return: The attack_earth of this CharacterSchema.  # noqa: E501
        :rtype: object
        """
        return self._attack_earth

    @attack_earth.setter
    def attack_earth(self, attack_earth):
        """Sets the attack_earth of this CharacterSchema.

        Earth attack.  # noqa: E501

        :param attack_earth: The attack_earth of this CharacterSchema.  # noqa: E501
        :type: object
        """
        if attack_earth is None:
            raise ValueError("Invalid value for `attack_earth`, must not be `None`")  # noqa: E501

        self._attack_earth = attack_earth

    @property
    def attack_water(self):
        """Gets the attack_water of this CharacterSchema.  # noqa: E501

        Water attack.  # noqa: E501

        :return: The attack_water of this CharacterSchema.  # noqa: E501
        :rtype: object
        """
        return self._attack_water

    @attack_water.setter
    def attack_water(self, attack_water):
        """Sets the attack_water of this CharacterSchema.

        Water attack.  # noqa: E501

        :param attack_water: The attack_water of this CharacterSchema.  # noqa: E501
        :type: object
        """
        if attack_water is None:
            raise ValueError("Invalid value for `attack_water`, must not be `None`")  # noqa: E501

        self._attack_water = attack_water

    @property
    def attack_air(self):
        """Gets the attack_air of this CharacterSchema.  # noqa: E501

        Air attack.  # noqa: E501

        :return: The attack_air of this CharacterSchema.  # noqa: E501
        :rtype: object
        """
        return self._attack_air

    @attack_air.setter
    def attack_air(self, attack_air):
        """Sets the attack_air of this CharacterSchema.

        Air attack.  # noqa: E501

        :param attack_air: The attack_air of this CharacterSchema.  # noqa: E501
        :type: object
        """
        if attack_air is None:
            raise ValueError("Invalid value for `attack_air`, must not be `None`")  # noqa: E501

        self._attack_air = attack_air

    @property
    def dmg_fire(self):
        """Gets the dmg_fire of this CharacterSchema.  # noqa: E501

        % Fire damage.  # noqa: E501

        :return: The dmg_fire of this CharacterSchema.  # noqa: E501
        :rtype: object
        """
        return self._dmg_fire

    @dmg_fire.setter
    def dmg_fire(self, dmg_fire):
        """Sets the dmg_fire of this CharacterSchema.

        % Fire damage.  # noqa: E501

        :param dmg_fire: The dmg_fire of this CharacterSchema.  # noqa: E501
        :type: object
        """
        if dmg_fire is None:
            raise ValueError("Invalid value for `dmg_fire`, must not be `None`")  # noqa: E501

        self._dmg_fire = dmg_fire

    @property
    def dmg_earth(self):
        """Gets the dmg_earth of this CharacterSchema.  # noqa: E501

        % Earth damage.  # noqa: E501

        :return: The dmg_earth of this CharacterSchema.  # noqa: E501
        :rtype: object
        """
        return self._dmg_earth

    @dmg_earth.setter
    def dmg_earth(self, dmg_earth):
        """Sets the dmg_earth of this CharacterSchema.

        % Earth damage.  # noqa: E501

        :param dmg_earth: The dmg_earth of this CharacterSchema.  # noqa: E501
        :type: object
        """
        if dmg_earth is None:
            raise ValueError("Invalid value for `dmg_earth`, must not be `None`")  # noqa: E501

        self._dmg_earth = dmg_earth

    @property
    def dmg_water(self):
        """Gets the dmg_water of this CharacterSchema.  # noqa: E501

        % Water damage.  # noqa: E501

        :return: The dmg_water of this CharacterSchema.  # noqa: E501
        :rtype: object
        """
        return self._dmg_water

    @dmg_water.setter
    def dmg_water(self, dmg_water):
        """Sets the dmg_water of this CharacterSchema.

        % Water damage.  # noqa: E501

        :param dmg_water: The dmg_water of this CharacterSchema.  # noqa: E501
        :type: object
        """
        if dmg_water is None:
            raise ValueError("Invalid value for `dmg_water`, must not be `None`")  # noqa: E501

        self._dmg_water = dmg_water

    @property
    def dmg_air(self):
        """Gets the dmg_air of this CharacterSchema.  # noqa: E501

        % Air damage.  # noqa: E501

        :return: The dmg_air of this CharacterSchema.  # noqa: E501
        :rtype: object
        """
        return self._dmg_air

    @dmg_air.setter
    def dmg_air(self, dmg_air):
        """Sets the dmg_air of this CharacterSchema.

        % Air damage.  # noqa: E501

        :param dmg_air: The dmg_air of this CharacterSchema.  # noqa: E501
        :type: object
        """
        if dmg_air is None:
            raise ValueError("Invalid value for `dmg_air`, must not be `None`")  # noqa: E501

        self._dmg_air = dmg_air

    @property
    def res_fire(self):
        """Gets the res_fire of this CharacterSchema.  # noqa: E501

        % Fire resistance.  # noqa: E501

        :return: The res_fire of this CharacterSchema.  # noqa: E501
        :rtype: object
        """
        return self._res_fire

    @res_fire.setter
    def res_fire(self, res_fire):
        """Sets the res_fire of this CharacterSchema.

        % Fire resistance.  # noqa: E501

        :param res_fire: The res_fire of this CharacterSchema.  # noqa: E501
        :type: object
        """
        if res_fire is None:
            raise ValueError("Invalid value for `res_fire`, must not be `None`")  # noqa: E501

        self._res_fire = res_fire

    @property
    def res_earth(self):
        """Gets the res_earth of this CharacterSchema.  # noqa: E501

        % Earth resistance.  # noqa: E501

        :return: The res_earth of this CharacterSchema.  # noqa: E501
        :rtype: object
        """
        return self._res_earth

    @res_earth.setter
    def res_earth(self, res_earth):
        """Sets the res_earth of this CharacterSchema.

        % Earth resistance.  # noqa: E501

        :param res_earth: The res_earth of this CharacterSchema.  # noqa: E501
        :type: object
        """
        if res_earth is None:
            raise ValueError("Invalid value for `res_earth`, must not be `None`")  # noqa: E501

        self._res_earth = res_earth

    @property
    def res_water(self):
        """Gets the res_water of this CharacterSchema.  # noqa: E501

        % Water resistance.  # noqa: E501

        :return: The res_water of this CharacterSchema.  # noqa: E501
        :rtype: object
        """
        return self._res_water

    @res_water.setter
    def res_water(self, res_water):
        """Sets the res_water of this CharacterSchema.

        % Water resistance.  # noqa: E501

        :param res_water: The res_water of this CharacterSchema.  # noqa: E501
        :type: object
        """
        if res_water is None:
            raise ValueError("Invalid value for `res_water`, must not be `None`")  # noqa: E501

        self._res_water = res_water

    @property
    def res_air(self):
        """Gets the res_air of this CharacterSchema.  # noqa: E501

        % Air resistance.  # noqa: E501

        :return: The res_air of this CharacterSchema.  # noqa: E501
        :rtype: object
        """
        return self._res_air

    @res_air.setter
    def res_air(self, res_air):
        """Sets the res_air of this CharacterSchema.

        % Air resistance.  # noqa: E501

        :param res_air: The res_air of this CharacterSchema.  # noqa: E501
        :type: object
        """
        if res_air is None:
            raise ValueError("Invalid value for `res_air`, must not be `None`")  # noqa: E501

        self._res_air = res_air

    @property
    def x(self):
        """Gets the x of this CharacterSchema.  # noqa: E501

        Character x coordinate.  # noqa: E501

        :return: The x of this CharacterSchema.  # noqa: E501
        :rtype: object
        """
        return self._x

    @x.setter
    def x(self, x):
        """Sets the x of this CharacterSchema.

        Character x coordinate.  # noqa: E501

        :param x: The x of this CharacterSchema.  # noqa: E501
        :type: object
        """
        if x is None:
            raise ValueError("Invalid value for `x`, must not be `None`")  # noqa: E501

        self._x = x

    @property
    def y(self):
        """Gets the y of this CharacterSchema.  # noqa: E501

        Character y coordinate.  # noqa: E501

        :return: The y of this CharacterSchema.  # noqa: E501
        :rtype: object
        """
        return self._y

    @y.setter
    def y(self, y):
        """Sets the y of this CharacterSchema.

        Character y coordinate.  # noqa: E501

        :param y: The y of this CharacterSchema.  # noqa: E501
        :type: object
        """
        if y is None:
            raise ValueError("Invalid value for `y`, must not be `None`")  # noqa: E501

        self._y = y

    @property
    def cooldown(self):
        """Gets the cooldown of this CharacterSchema.  # noqa: E501

        Cooldown in seconds.  # noqa: E501

        :return: The cooldown of this CharacterSchema.  # noqa: E501
        :rtype: object
        """
        return self._cooldown

    @cooldown.setter
    def cooldown(self, cooldown):
        """Sets the cooldown of this CharacterSchema.

        Cooldown in seconds.  # noqa: E501

        :param cooldown: The cooldown of this CharacterSchema.  # noqa: E501
        :type: object
        """
        if cooldown is None:
            raise ValueError("Invalid value for `cooldown`, must not be `None`")  # noqa: E501

        self._cooldown = cooldown

    @property
    def cooldown_expiration(self):
        """Gets the cooldown_expiration of this CharacterSchema.  # noqa: E501

        Datetime Cooldown expiration.  # noqa: E501

        :return: The cooldown_expiration of this CharacterSchema.  # noqa: E501
        :rtype: object
        """
        return self._cooldown_expiration

    @cooldown_expiration.setter
    def cooldown_expiration(self, cooldown_expiration):
        """Sets the cooldown_expiration of this CharacterSchema.

        Datetime Cooldown expiration.  # noqa: E501

        :param cooldown_expiration: The cooldown_expiration of this CharacterSchema.  # noqa: E501
        :type: object
        """

        self._cooldown_expiration = cooldown_expiration

    @property
    def weapon_slot(self):
        """Gets the weapon_slot of this CharacterSchema.  # noqa: E501

        Weapon slot.  # noqa: E501

        :return: The weapon_slot of this CharacterSchema.  # noqa: E501
        :rtype: object
        """
        return self._weapon_slot

    @weapon_slot.setter
    def weapon_slot(self, weapon_slot):
        """Sets the weapon_slot of this CharacterSchema.

        Weapon slot.  # noqa: E501

        :param weapon_slot: The weapon_slot of this CharacterSchema.  # noqa: E501
        :type: object
        """
        if weapon_slot is None:
            raise ValueError("Invalid value for `weapon_slot`, must not be `None`")  # noqa: E501

        self._weapon_slot = weapon_slot

    @property
    def shield_slot(self):
        """Gets the shield_slot of this CharacterSchema.  # noqa: E501

        Shield slot.  # noqa: E501

        :return: The shield_slot of this CharacterSchema.  # noqa: E501
        :rtype: object
        """
        return self._shield_slot

    @shield_slot.setter
    def shield_slot(self, shield_slot):
        """Sets the shield_slot of this CharacterSchema.

        Shield slot.  # noqa: E501

        :param shield_slot: The shield_slot of this CharacterSchema.  # noqa: E501
        :type: object
        """
        if shield_slot is None:
            raise ValueError("Invalid value for `shield_slot`, must not be `None`")  # noqa: E501

        self._shield_slot = shield_slot

    @property
    def helmet_slot(self):
        """Gets the helmet_slot of this CharacterSchema.  # noqa: E501

        Helmet slot.  # noqa: E501

        :return: The helmet_slot of this CharacterSchema.  # noqa: E501
        :rtype: object
        """
        return self._helmet_slot

    @helmet_slot.setter
    def helmet_slot(self, helmet_slot):
        """Sets the helmet_slot of this CharacterSchema.

        Helmet slot.  # noqa: E501

        :param helmet_slot: The helmet_slot of this CharacterSchema.  # noqa: E501
        :type: object
        """
        if helmet_slot is None:
            raise ValueError("Invalid value for `helmet_slot`, must not be `None`")  # noqa: E501

        self._helmet_slot = helmet_slot

    @property
    def body_armor_slot(self):
        """Gets the body_armor_slot of this CharacterSchema.  # noqa: E501

        Body armor slot.  # noqa: E501

        :return: The body_armor_slot of this CharacterSchema.  # noqa: E501
        :rtype: object
        """
        return self._body_armor_slot

    @body_armor_slot.setter
    def body_armor_slot(self, body_armor_slot):
        """Sets the body_armor_slot of this CharacterSchema.

        Body armor slot.  # noqa: E501

        :param body_armor_slot: The body_armor_slot of this CharacterSchema.  # noqa: E501
        :type: object
        """
        if body_armor_slot is None:
            raise ValueError("Invalid value for `body_armor_slot`, must not be `None`")  # noqa: E501

        self._body_armor_slot = body_armor_slot

    @property
    def leg_armor_slot(self):
        """Gets the leg_armor_slot of this CharacterSchema.  # noqa: E501

        Leg armor slot.  # noqa: E501

        :return: The leg_armor_slot of this CharacterSchema.  # noqa: E501
        :rtype: object
        """
        return self._leg_armor_slot

    @leg_armor_slot.setter
    def leg_armor_slot(self, leg_armor_slot):
        """Sets the leg_armor_slot of this CharacterSchema.

        Leg armor slot.  # noqa: E501

        :param leg_armor_slot: The leg_armor_slot of this CharacterSchema.  # noqa: E501
        :type: object
        """
        if leg_armor_slot is None:
            raise ValueError("Invalid value for `leg_armor_slot`, must not be `None`")  # noqa: E501

        self._leg_armor_slot = leg_armor_slot

    @property
    def boots_slot(self):
        """Gets the boots_slot of this CharacterSchema.  # noqa: E501

        Boots slot.  # noqa: E501

        :return: The boots_slot of this CharacterSchema.  # noqa: E501
        :rtype: object
        """
        return self._boots_slot

    @boots_slot.setter
    def boots_slot(self, boots_slot):
        """Sets the boots_slot of this CharacterSchema.

        Boots slot.  # noqa: E501

        :param boots_slot: The boots_slot of this CharacterSchema.  # noqa: E501
        :type: object
        """
        if boots_slot is None:
            raise ValueError("Invalid value for `boots_slot`, must not be `None`")  # noqa: E501

        self._boots_slot = boots_slot

    @property
    def ring1_slot(self):
        """Gets the ring1_slot of this CharacterSchema.  # noqa: E501

        Ring 1 slot.  # noqa: E501

        :return: The ring1_slot of this CharacterSchema.  # noqa: E501
        :rtype: object
        """
        return self._ring1_slot

    @ring1_slot.setter
    def ring1_slot(self, ring1_slot):
        """Sets the ring1_slot of this CharacterSchema.

        Ring 1 slot.  # noqa: E501

        :param ring1_slot: The ring1_slot of this CharacterSchema.  # noqa: E501
        :type: object
        """
        if ring1_slot is None:
            raise ValueError("Invalid value for `ring1_slot`, must not be `None`")  # noqa: E501

        self._ring1_slot = ring1_slot

    @property
    def ring2_slot(self):
        """Gets the ring2_slot of this CharacterSchema.  # noqa: E501

        Ring 2 slot.  # noqa: E501

        :return: The ring2_slot of this CharacterSchema.  # noqa: E501
        :rtype: object
        """
        return self._ring2_slot

    @ring2_slot.setter
    def ring2_slot(self, ring2_slot):
        """Sets the ring2_slot of this CharacterSchema.

        Ring 2 slot.  # noqa: E501

        :param ring2_slot: The ring2_slot of this CharacterSchema.  # noqa: E501
        :type: object
        """
        if ring2_slot is None:
            raise ValueError("Invalid value for `ring2_slot`, must not be `None`")  # noqa: E501

        self._ring2_slot = ring2_slot

    @property
    def amulet_slot(self):
        """Gets the amulet_slot of this CharacterSchema.  # noqa: E501

        Amulet slot.  # noqa: E501

        :return: The amulet_slot of this CharacterSchema.  # noqa: E501
        :rtype: object
        """
        return self._amulet_slot

    @amulet_slot.setter
    def amulet_slot(self, amulet_slot):
        """Sets the amulet_slot of this CharacterSchema.

        Amulet slot.  # noqa: E501

        :param amulet_slot: The amulet_slot of this CharacterSchema.  # noqa: E501
        :type: object
        """
        if amulet_slot is None:
            raise ValueError("Invalid value for `amulet_slot`, must not be `None`")  # noqa: E501

        self._amulet_slot = amulet_slot

    @property
    def artifact1_slot(self):
        """Gets the artifact1_slot of this CharacterSchema.  # noqa: E501

        Artifact 1 slot.  # noqa: E501

        :return: The artifact1_slot of this CharacterSchema.  # noqa: E501
        :rtype: object
        """
        return self._artifact1_slot

    @artifact1_slot.setter
    def artifact1_slot(self, artifact1_slot):
        """Sets the artifact1_slot of this CharacterSchema.

        Artifact 1 slot.  # noqa: E501

        :param artifact1_slot: The artifact1_slot of this CharacterSchema.  # noqa: E501
        :type: object
        """
        if artifact1_slot is None:
            raise ValueError("Invalid value for `artifact1_slot`, must not be `None`")  # noqa: E501

        self._artifact1_slot = artifact1_slot

    @property
    def artifact2_slot(self):
        """Gets the artifact2_slot of this CharacterSchema.  # noqa: E501

        Artifact 2 slot.  # noqa: E501

        :return: The artifact2_slot of this CharacterSchema.  # noqa: E501
        :rtype: object
        """
        return self._artifact2_slot

    @artifact2_slot.setter
    def artifact2_slot(self, artifact2_slot):
        """Sets the artifact2_slot of this CharacterSchema.

        Artifact 2 slot.  # noqa: E501

        :param artifact2_slot: The artifact2_slot of this CharacterSchema.  # noqa: E501
        :type: object
        """
        if artifact2_slot is None:
            raise ValueError("Invalid value for `artifact2_slot`, must not be `None`")  # noqa: E501

        self._artifact2_slot = artifact2_slot

    @property
    def artifact3_slot(self):
        """Gets the artifact3_slot of this CharacterSchema.  # noqa: E501

        Artifact 3 slot.  # noqa: E501

        :return: The artifact3_slot of this CharacterSchema.  # noqa: E501
        :rtype: object
        """
        return self._artifact3_slot

    @artifact3_slot.setter
    def artifact3_slot(self, artifact3_slot):
        """Sets the artifact3_slot of this CharacterSchema.

        Artifact 3 slot.  # noqa: E501

        :param artifact3_slot: The artifact3_slot of this CharacterSchema.  # noqa: E501
        :type: object
        """
        if artifact3_slot is None:
            raise ValueError("Invalid value for `artifact3_slot`, must not be `None`")  # noqa: E501

        self._artifact3_slot = artifact3_slot

    @property
    def consumable1_slot(self):
        """Gets the consumable1_slot of this CharacterSchema.  # noqa: E501

        Consumable 1 slot.  # noqa: E501

        :return: The consumable1_slot of this CharacterSchema.  # noqa: E501
        :rtype: object
        """
        return self._consumable1_slot

    @consumable1_slot.setter
    def consumable1_slot(self, consumable1_slot):
        """Sets the consumable1_slot of this CharacterSchema.

        Consumable 1 slot.  # noqa: E501

        :param consumable1_slot: The consumable1_slot of this CharacterSchema.  # noqa: E501
        :type: object
        """
        if consumable1_slot is None:
            raise ValueError("Invalid value for `consumable1_slot`, must not be `None`")  # noqa: E501

        self._consumable1_slot = consumable1_slot

    @property
    def consumable1_slot_quantity(self):
        """Gets the consumable1_slot_quantity of this CharacterSchema.  # noqa: E501

        Consumable 1 quantity.  # noqa: E501

        :return: The consumable1_slot_quantity of this CharacterSchema.  # noqa: E501
        :rtype: object
        """
        return self._consumable1_slot_quantity

    @consumable1_slot_quantity.setter
    def consumable1_slot_quantity(self, consumable1_slot_quantity):
        """Sets the consumable1_slot_quantity of this CharacterSchema.

        Consumable 1 quantity.  # noqa: E501

        :param consumable1_slot_quantity: The consumable1_slot_quantity of this CharacterSchema.  # noqa: E501
        :type: object
        """
        if consumable1_slot_quantity is None:
            raise ValueError("Invalid value for `consumable1_slot_quantity`, must not be `None`")  # noqa: E501

        self._consumable1_slot_quantity = consumable1_slot_quantity

    @property
    def consumable2_slot(self):
        """Gets the consumable2_slot of this CharacterSchema.  # noqa: E501

        Consumable 2 slot.  # noqa: E501

        :return: The consumable2_slot of this CharacterSchema.  # noqa: E501
        :rtype: object
        """
        return self._consumable2_slot

    @consumable2_slot.setter
    def consumable2_slot(self, consumable2_slot):
        """Sets the consumable2_slot of this CharacterSchema.

        Consumable 2 slot.  # noqa: E501

        :param consumable2_slot: The consumable2_slot of this CharacterSchema.  # noqa: E501
        :type: object
        """
        if consumable2_slot is None:
            raise ValueError("Invalid value for `consumable2_slot`, must not be `None`")  # noqa: E501

        self._consumable2_slot = consumable2_slot

    @property
    def consumable2_slot_quantity(self):
        """Gets the consumable2_slot_quantity of this CharacterSchema.  # noqa: E501

        Consumable 2 quantity.  # noqa: E501

        :return: The consumable2_slot_quantity of this CharacterSchema.  # noqa: E501
        :rtype: object
        """
        return self._consumable2_slot_quantity

    @consumable2_slot_quantity.setter
    def consumable2_slot_quantity(self, consumable2_slot_quantity):
        """Sets the consumable2_slot_quantity of this CharacterSchema.

        Consumable 2 quantity.  # noqa: E501

        :param consumable2_slot_quantity: The consumable2_slot_quantity of this CharacterSchema.  # noqa: E501
        :type: object
        """
        if consumable2_slot_quantity is None:
            raise ValueError("Invalid value for `consumable2_slot_quantity`, must not be `None`")  # noqa: E501

        self._consumable2_slot_quantity = consumable2_slot_quantity

    @property
    def task(self):
        """Gets the task of this CharacterSchema.  # noqa: E501

        Task in progress.  # noqa: E501

        :return: The task of this CharacterSchema.  # noqa: E501
        :rtype: object
        """
        return self._task

    @task.setter
    def task(self, task):
        """Sets the task of this CharacterSchema.

        Task in progress.  # noqa: E501

        :param task: The task of this CharacterSchema.  # noqa: E501
        :type: object
        """
        if task is None:
            raise ValueError("Invalid value for `task`, must not be `None`")  # noqa: E501

        self._task = task

    @property
    def task_type(self):
        """Gets the task_type of this CharacterSchema.  # noqa: E501

        Task type.  # noqa: E501

        :return: The task_type of this CharacterSchema.  # noqa: E501
        :rtype: object
        """
        return self._task_type

    @task_type.setter
    def task_type(self, task_type):
        """Sets the task_type of this CharacterSchema.

        Task type.  # noqa: E501

        :param task_type: The task_type of this CharacterSchema.  # noqa: E501
        :type: object
        """
        if task_type is None:
            raise ValueError("Invalid value for `task_type`, must not be `None`")  # noqa: E501

        self._task_type = task_type

    @property
    def task_progress(self):
        """Gets the task_progress of this CharacterSchema.  # noqa: E501

        Task progression.  # noqa: E501

        :return: The task_progress of this CharacterSchema.  # noqa: E501
        :rtype: object
        """
        return self._task_progress

    @task_progress.setter
    def task_progress(self, task_progress):
        """Sets the task_progress of this CharacterSchema.

        Task progression.  # noqa: E501

        :param task_progress: The task_progress of this CharacterSchema.  # noqa: E501
        :type: object
        """
        if task_progress is None:
            raise ValueError("Invalid value for `task_progress`, must not be `None`")  # noqa: E501

        self._task_progress = task_progress

    @property
    def task_total(self):
        """Gets the task_total of this CharacterSchema.  # noqa: E501

        Task total objective.  # noqa: E501

        :return: The task_total of this CharacterSchema.  # noqa: E501
        :rtype: object
        """
        return self._task_total

    @task_total.setter
    def task_total(self, task_total):
        """Sets the task_total of this CharacterSchema.

        Task total objective.  # noqa: E501

        :param task_total: The task_total of this CharacterSchema.  # noqa: E501
        :type: object
        """
        if task_total is None:
            raise ValueError("Invalid value for `task_total`, must not be `None`")  # noqa: E501

        self._task_total = task_total

    @property
    def inventory_max_items(self):
        """Gets the inventory_max_items of this CharacterSchema.  # noqa: E501

        Inventory max items.  # noqa: E501

        :return: The inventory_max_items of this CharacterSchema.  # noqa: E501
        :rtype: object
        """
        return self._inventory_max_items

    @inventory_max_items.setter
    def inventory_max_items(self, inventory_max_items):
        """Sets the inventory_max_items of this CharacterSchema.

        Inventory max items.  # noqa: E501

        :param inventory_max_items: The inventory_max_items of this CharacterSchema.  # noqa: E501
        :type: object
        """
        if inventory_max_items is None:
            raise ValueError("Invalid value for `inventory_max_items`, must not be `None`")  # noqa: E501

        self._inventory_max_items = inventory_max_items

    @property
    def inventory(self):
        """Gets the inventory of this CharacterSchema.  # noqa: E501

        List of inventory slots.  # noqa: E501

        :return: The inventory of this CharacterSchema.  # noqa: E501
        :rtype: object
        """
        return self._inventory

    @inventory.setter
    def inventory(self, inventory):
        """Sets the inventory of this CharacterSchema.

        List of inventory slots.  # noqa: E501

        :param inventory: The inventory of this CharacterSchema.  # noqa: E501
        :type: object
        """

        self._inventory = inventory

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CharacterSchema, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CharacterSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
