# coding: utf-8

"""
    Artifacts API

     Artifacts is an API-based MMO game where you can manage 5 characters to explore, fight, gather resources, craft items and much more.  Website: https://artifactsmmo.com/  Documentation: https://docs.artifactsmmo.com/  OpenAPI Spec: https://api.artifactsmmo.com/openapi.json   # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BankSchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'slots': 'object',
        'expansions': 'object',
        'next_expansion_cost': 'object',
        'gold': 'object'
    }

    attribute_map = {
        'slots': 'slots',
        'expansions': 'expansions',
        'next_expansion_cost': 'next_expansion_cost',
        'gold': 'gold'
    }

    def __init__(self, slots=None, expansions=None, next_expansion_cost=None, gold=None):  # noqa: E501
        """BankSchema - a model defined in Swagger"""  # noqa: E501
        self._slots = None
        self._expansions = None
        self._next_expansion_cost = None
        self._gold = None
        self.discriminator = None
        self.slots = slots
        self.expansions = expansions
        self.next_expansion_cost = next_expansion_cost
        self.gold = gold

    @property
    def slots(self):
        """Gets the slots of this BankSchema.  # noqa: E501

        Maximum slots in your bank.  # noqa: E501

        :return: The slots of this BankSchema.  # noqa: E501
        :rtype: object
        """
        return self._slots

    @slots.setter
    def slots(self, slots):
        """Sets the slots of this BankSchema.

        Maximum slots in your bank.  # noqa: E501

        :param slots: The slots of this BankSchema.  # noqa: E501
        :type: object
        """
        if slots is None:
            raise ValueError("Invalid value for `slots`, must not be `None`")  # noqa: E501

        self._slots = slots

    @property
    def expansions(self):
        """Gets the expansions of this BankSchema.  # noqa: E501

        Bank expansions.  # noqa: E501

        :return: The expansions of this BankSchema.  # noqa: E501
        :rtype: object
        """
        return self._expansions

    @expansions.setter
    def expansions(self, expansions):
        """Sets the expansions of this BankSchema.

        Bank expansions.  # noqa: E501

        :param expansions: The expansions of this BankSchema.  # noqa: E501
        :type: object
        """
        if expansions is None:
            raise ValueError("Invalid value for `expansions`, must not be `None`")  # noqa: E501

        self._expansions = expansions

    @property
    def next_expansion_cost(self):
        """Gets the next_expansion_cost of this BankSchema.  # noqa: E501

        Next expansion cost.  # noqa: E501

        :return: The next_expansion_cost of this BankSchema.  # noqa: E501
        :rtype: object
        """
        return self._next_expansion_cost

    @next_expansion_cost.setter
    def next_expansion_cost(self, next_expansion_cost):
        """Sets the next_expansion_cost of this BankSchema.

        Next expansion cost.  # noqa: E501

        :param next_expansion_cost: The next_expansion_cost of this BankSchema.  # noqa: E501
        :type: object
        """
        if next_expansion_cost is None:
            raise ValueError("Invalid value for `next_expansion_cost`, must not be `None`")  # noqa: E501

        self._next_expansion_cost = next_expansion_cost

    @property
    def gold(self):
        """Gets the gold of this BankSchema.  # noqa: E501

        Quantity of gold in your bank.  # noqa: E501

        :return: The gold of this BankSchema.  # noqa: E501
        :rtype: object
        """
        return self._gold

    @gold.setter
    def gold(self, gold):
        """Sets the gold of this BankSchema.

        Quantity of gold in your bank.  # noqa: E501

        :param gold: The gold of this BankSchema.  # noqa: E501
        :type: object
        """
        if gold is None:
            raise ValueError("Invalid value for `gold`, must not be `None`")  # noqa: E501

        self._gold = gold

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BankSchema, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BankSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
