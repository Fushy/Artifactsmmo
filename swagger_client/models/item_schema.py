# coding: utf-8

"""
    Artifacts API

     Artifacts is an API-based MMO game where you can manage 5 characters to explore, fight, gather resources, craft items and much more.  Website: https://artifactsmmo.com/  Documentation: https://docs.artifactsmmo.com/  OpenAPI Spec: https://api.artifactsmmo.com/openapi.json   # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ItemSchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'object',
        'code': 'object',
        'level': 'object',
        'type': 'object',
        'subtype': 'object',
        'description': 'object',
        'effects': 'object',
        'craft': 'object'
    }

    attribute_map = {
        'name': 'name',
        'code': 'code',
        'level': 'level',
        'type': 'type',
        'subtype': 'subtype',
        'description': 'description',
        'effects': 'effects',
        'craft': 'craft'
    }

    def __init__(self, name=None, code=None, level=None, type=None, subtype=None, description=None, effects=None, craft=None):  # noqa: E501
        """ItemSchema - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._code = None
        self._level = None
        self._type = None
        self._subtype = None
        self._description = None
        self._effects = None
        self._craft = None
        self.discriminator = None
        self.name = name
        self.code = code
        self.level = level
        self.type = type
        self.subtype = subtype
        self.description = description
        if effects is not None:
            self.effects = effects
        if craft is not None:
            self.craft = craft

    @property
    def name(self):
        """Gets the name of this ItemSchema.  # noqa: E501

        Item name.  # noqa: E501

        :return: The name of this ItemSchema.  # noqa: E501
        :rtype: object
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ItemSchema.

        Item name.  # noqa: E501

        :param name: The name of this ItemSchema.  # noqa: E501
        :type: object
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def code(self):
        """Gets the code of this ItemSchema.  # noqa: E501

        Item code. This is the item's unique identifier (ID).  # noqa: E501

        :return: The code of this ItemSchema.  # noqa: E501
        :rtype: object
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ItemSchema.

        Item code. This is the item's unique identifier (ID).  # noqa: E501

        :param code: The code of this ItemSchema.  # noqa: E501
        :type: object
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501

        self._code = code

    @property
    def level(self):
        """Gets the level of this ItemSchema.  # noqa: E501

        Item level.  # noqa: E501

        :return: The level of this ItemSchema.  # noqa: E501
        :rtype: object
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this ItemSchema.

        Item level.  # noqa: E501

        :param level: The level of this ItemSchema.  # noqa: E501
        :type: object
        """
        if level is None:
            raise ValueError("Invalid value for `level`, must not be `None`")  # noqa: E501

        self._level = level

    @property
    def type(self):
        """Gets the type of this ItemSchema.  # noqa: E501

        Item type.  # noqa: E501

        :return: The type of this ItemSchema.  # noqa: E501
        :rtype: object
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ItemSchema.

        Item type.  # noqa: E501

        :param type: The type of this ItemSchema.  # noqa: E501
        :type: object
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def subtype(self):
        """Gets the subtype of this ItemSchema.  # noqa: E501

        Item subtype.  # noqa: E501

        :return: The subtype of this ItemSchema.  # noqa: E501
        :rtype: object
        """
        return self._subtype

    @subtype.setter
    def subtype(self, subtype):
        """Sets the subtype of this ItemSchema.

        Item subtype.  # noqa: E501

        :param subtype: The subtype of this ItemSchema.  # noqa: E501
        :type: object
        """
        if subtype is None:
            raise ValueError("Invalid value for `subtype`, must not be `None`")  # noqa: E501

        self._subtype = subtype

    @property
    def description(self):
        """Gets the description of this ItemSchema.  # noqa: E501

        Item description.  # noqa: E501

        :return: The description of this ItemSchema.  # noqa: E501
        :rtype: object
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ItemSchema.

        Item description.  # noqa: E501

        :param description: The description of this ItemSchema.  # noqa: E501
        :type: object
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def effects(self):
        """Gets the effects of this ItemSchema.  # noqa: E501

        List of object effects. For equipment, it will include item stats.  # noqa: E501

        :return: The effects of this ItemSchema.  # noqa: E501
        :rtype: object
        """
        return self._effects

    @effects.setter
    def effects(self, effects):
        """Sets the effects of this ItemSchema.

        List of object effects. For equipment, it will include item stats.  # noqa: E501

        :param effects: The effects of this ItemSchema.  # noqa: E501
        :type: object
        """

        self._effects = effects

    @property
    def craft(self):
        """Gets the craft of this ItemSchema.  # noqa: E501

        Craft information. If applicable.  # noqa: E501

        :return: The craft of this ItemSchema.  # noqa: E501
        :rtype: object
        """
        return self._craft

    @craft.setter
    def craft(self, craft):
        """Sets the craft of this ItemSchema.

        Craft information. If applicable.  # noqa: E501

        :param craft: The craft of this ItemSchema.  # noqa: E501
        :type: object
        """

        self._craft = craft

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ItemSchema, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ItemSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
