# coding: utf-8

"""
    Artifacts API

     Artifacts is an API-based MMO game where you can manage 5 characters to explore, fight, gather resources, craft items and much more.  Website: https://artifactsmmo.com/  Documentation: https://docs.artifactsmmo.com/  OpenAPI Spec: https://api.artifactsmmo.com/openapi.json   # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ResourceSchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'object',
        'code': 'object',
        'skill': 'object',
        'level': 'object',
        'drops': 'object'
    }

    attribute_map = {
        'name': 'name',
        'code': 'code',
        'skill': 'skill',
        'level': 'level',
        'drops': 'drops'
    }

    def __init__(self, name=None, code=None, skill=None, level=None, drops=None):  # noqa: E501
        """ResourceSchema - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._code = None
        self._skill = None
        self._level = None
        self._drops = None
        self.discriminator = None
        self.name = name
        self.code = code
        self.skill = skill
        self.level = level
        self.drops = drops

    @property
    def name(self):
        """Gets the name of this ResourceSchema.  # noqa: E501

        The name of the resource  # noqa: E501

        :return: The name of this ResourceSchema.  # noqa: E501
        :rtype: object
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ResourceSchema.

        The name of the resource  # noqa: E501

        :param name: The name of this ResourceSchema.  # noqa: E501
        :type: object
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def code(self):
        """Gets the code of this ResourceSchema.  # noqa: E501

        The code of the resource. This is the resource's unique identifier (ID).  # noqa: E501

        :return: The code of this ResourceSchema.  # noqa: E501
        :rtype: object
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ResourceSchema.

        The code of the resource. This is the resource's unique identifier (ID).  # noqa: E501

        :param code: The code of this ResourceSchema.  # noqa: E501
        :type: object
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501

        self._code = code

    @property
    def skill(self):
        """Gets the skill of this ResourceSchema.  # noqa: E501

        The skill required to gather this resource.  # noqa: E501

        :return: The skill of this ResourceSchema.  # noqa: E501
        :rtype: object
        """
        return self._skill

    @skill.setter
    def skill(self, skill):
        """Sets the skill of this ResourceSchema.

        The skill required to gather this resource.  # noqa: E501

        :param skill: The skill of this ResourceSchema.  # noqa: E501
        :type: object
        """
        if skill is None:
            raise ValueError("Invalid value for `skill`, must not be `None`")  # noqa: E501

        self._skill = skill

    @property
    def level(self):
        """Gets the level of this ResourceSchema.  # noqa: E501

        The skill level required to gather this resource.  # noqa: E501

        :return: The level of this ResourceSchema.  # noqa: E501
        :rtype: object
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this ResourceSchema.

        The skill level required to gather this resource.  # noqa: E501

        :param level: The level of this ResourceSchema.  # noqa: E501
        :type: object
        """
        if level is None:
            raise ValueError("Invalid value for `level`, must not be `None`")  # noqa: E501

        self._level = level

    @property
    def drops(self):
        """Gets the drops of this ResourceSchema.  # noqa: E501

        The drops of this resource.  # noqa: E501

        :return: The drops of this ResourceSchema.  # noqa: E501
        :rtype: object
        """
        return self._drops

    @drops.setter
    def drops(self, drops):
        """Sets the drops of this ResourceSchema.

        The drops of this resource.  # noqa: E501

        :param drops: The drops of this ResourceSchema.  # noqa: E501
        :type: object
        """
        if drops is None:
            raise ValueError("Invalid value for `drops`, must not be `None`")  # noqa: E501

        self._drops = drops

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResourceSchema, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResourceSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
