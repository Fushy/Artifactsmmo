# coding: utf-8

"""
    Artifacts API

     Artifacts is an API-based MMO game where you can manage 5 characters to explore, fight, gather resources, craft items and much more.  Website: https://artifactsmmo.com/  Documentation: https://docs.artifactsmmo.com/  OpenAPI Spec: https://api.artifactsmmo.com/openapi.json   # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FightSchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'xp': 'object',
        'gold': 'object',
        'drops': 'object',
        'turns': 'object',
        'monster_blocked_hits': 'object',
        'player_blocked_hits': 'object',
        'logs': 'object',
        'result': 'object'
    }

    attribute_map = {
        'xp': 'xp',
        'gold': 'gold',
        'drops': 'drops',
        'turns': 'turns',
        'monster_blocked_hits': 'monster_blocked_hits',
        'player_blocked_hits': 'player_blocked_hits',
        'logs': 'logs',
        'result': 'result'
    }

    def __init__(self, xp=None, gold=None, drops=None, turns=None, monster_blocked_hits=None, player_blocked_hits=None, logs=None, result=None):  # noqa: E501
        """FightSchema - a model defined in Swagger"""  # noqa: E501
        self._xp = None
        self._gold = None
        self._drops = None
        self._turns = None
        self._monster_blocked_hits = None
        self._player_blocked_hits = None
        self._logs = None
        self._result = None
        self.discriminator = None
        self.xp = xp
        self.gold = gold
        self.drops = drops
        self.turns = turns
        self.monster_blocked_hits = monster_blocked_hits
        self.player_blocked_hits = player_blocked_hits
        self.logs = logs
        self.result = result

    @property
    def xp(self):
        """Gets the xp of this FightSchema.  # noqa: E501

        The amount of xp gained by the fight.  # noqa: E501

        :return: The xp of this FightSchema.  # noqa: E501
        :rtype: object
        """
        return self._xp

    @xp.setter
    def xp(self, xp):
        """Sets the xp of this FightSchema.

        The amount of xp gained by the fight.  # noqa: E501

        :param xp: The xp of this FightSchema.  # noqa: E501
        :type: object
        """
        if xp is None:
            raise ValueError("Invalid value for `xp`, must not be `None`")  # noqa: E501

        self._xp = xp

    @property
    def gold(self):
        """Gets the gold of this FightSchema.  # noqa: E501

        The amount of gold gained by the fight.  # noqa: E501

        :return: The gold of this FightSchema.  # noqa: E501
        :rtype: object
        """
        return self._gold

    @gold.setter
    def gold(self, gold):
        """Sets the gold of this FightSchema.

        The amount of gold gained by the fight.  # noqa: E501

        :param gold: The gold of this FightSchema.  # noqa: E501
        :type: object
        """
        if gold is None:
            raise ValueError("Invalid value for `gold`, must not be `None`")  # noqa: E501

        self._gold = gold

    @property
    def drops(self):
        """Gets the drops of this FightSchema.  # noqa: E501

        The items dropped by the fight.  # noqa: E501

        :return: The drops of this FightSchema.  # noqa: E501
        :rtype: object
        """
        return self._drops

    @drops.setter
    def drops(self, drops):
        """Sets the drops of this FightSchema.

        The items dropped by the fight.  # noqa: E501

        :param drops: The drops of this FightSchema.  # noqa: E501
        :type: object
        """
        if drops is None:
            raise ValueError("Invalid value for `drops`, must not be `None`")  # noqa: E501

        self._drops = drops

    @property
    def turns(self):
        """Gets the turns of this FightSchema.  # noqa: E501

        Numbers of the turns of the combat.  # noqa: E501

        :return: The turns of this FightSchema.  # noqa: E501
        :rtype: object
        """
        return self._turns

    @turns.setter
    def turns(self, turns):
        """Sets the turns of this FightSchema.

        Numbers of the turns of the combat.  # noqa: E501

        :param turns: The turns of this FightSchema.  # noqa: E501
        :type: object
        """
        if turns is None:
            raise ValueError("Invalid value for `turns`, must not be `None`")  # noqa: E501

        self._turns = turns

    @property
    def monster_blocked_hits(self):
        """Gets the monster_blocked_hits of this FightSchema.  # noqa: E501

        The amount of blocked hits by the monster.  # noqa: E501

        :return: The monster_blocked_hits of this FightSchema.  # noqa: E501
        :rtype: object
        """
        return self._monster_blocked_hits

    @monster_blocked_hits.setter
    def monster_blocked_hits(self, monster_blocked_hits):
        """Sets the monster_blocked_hits of this FightSchema.

        The amount of blocked hits by the monster.  # noqa: E501

        :param monster_blocked_hits: The monster_blocked_hits of this FightSchema.  # noqa: E501
        :type: object
        """
        if monster_blocked_hits is None:
            raise ValueError("Invalid value for `monster_blocked_hits`, must not be `None`")  # noqa: E501

        self._monster_blocked_hits = monster_blocked_hits

    @property
    def player_blocked_hits(self):
        """Gets the player_blocked_hits of this FightSchema.  # noqa: E501

        The amount of blocked hits by the player.  # noqa: E501

        :return: The player_blocked_hits of this FightSchema.  # noqa: E501
        :rtype: object
        """
        return self._player_blocked_hits

    @player_blocked_hits.setter
    def player_blocked_hits(self, player_blocked_hits):
        """Sets the player_blocked_hits of this FightSchema.

        The amount of blocked hits by the player.  # noqa: E501

        :param player_blocked_hits: The player_blocked_hits of this FightSchema.  # noqa: E501
        :type: object
        """
        if player_blocked_hits is None:
            raise ValueError("Invalid value for `player_blocked_hits`, must not be `None`")  # noqa: E501

        self._player_blocked_hits = player_blocked_hits

    @property
    def logs(self):
        """Gets the logs of this FightSchema.  # noqa: E501

        The fight logs.  # noqa: E501

        :return: The logs of this FightSchema.  # noqa: E501
        :rtype: object
        """
        return self._logs

    @logs.setter
    def logs(self, logs):
        """Sets the logs of this FightSchema.

        The fight logs.  # noqa: E501

        :param logs: The logs of this FightSchema.  # noqa: E501
        :type: object
        """
        if logs is None:
            raise ValueError("Invalid value for `logs`, must not be `None`")  # noqa: E501

        self._logs = logs

    @property
    def result(self):
        """Gets the result of this FightSchema.  # noqa: E501

        The result of the fight.  # noqa: E501

        :return: The result of this FightSchema.  # noqa: E501
        :rtype: object
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this FightSchema.

        The result of the fight.  # noqa: E501

        :param result: The result of this FightSchema.  # noqa: E501
        :type: object
        """
        if result is None:
            raise ValueError("Invalid value for `result`, must not be `None`")  # noqa: E501

        self._result = result

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FightSchema, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FightSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
