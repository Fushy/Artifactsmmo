# coding: utf-8

"""
    Artifacts API

     Artifacts is an API-based MMO game where you can manage 5 characters to explore, fight, gather resources, craft items and much more.  Website: https://artifactsmmo.com/  Documentation: https://docs.artifactsmmo.com/  OpenAPI Spec: https://api.artifactsmmo.com/openapi.json   # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MapSchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'object',
        'skin': 'object',
        'x': 'object',
        'y': 'object',
        'content': 'object'
    }

    attribute_map = {
        'name': 'name',
        'skin': 'skin',
        'x': 'x',
        'y': 'y',
        'content': 'content'
    }

    def __init__(self, name=None, skin=None, x=None, y=None, content=None):  # noqa: E501
        """MapSchema - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._skin = None
        self._x = None
        self._y = None
        self._content = None
        self.discriminator = None
        self.name = name
        self.skin = skin
        self.x = x
        self.y = y
        self.content = content

    @property
    def name(self):
        """Gets the name of this MapSchema.  # noqa: E501

        Name of the map.  # noqa: E501

        :return: The name of this MapSchema.  # noqa: E501
        :rtype: object
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MapSchema.

        Name of the map.  # noqa: E501

        :param name: The name of this MapSchema.  # noqa: E501
        :type: object
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def skin(self):
        """Gets the skin of this MapSchema.  # noqa: E501

        Skin of the map.  # noqa: E501

        :return: The skin of this MapSchema.  # noqa: E501
        :rtype: object
        """
        return self._skin

    @skin.setter
    def skin(self, skin):
        """Sets the skin of this MapSchema.

        Skin of the map.  # noqa: E501

        :param skin: The skin of this MapSchema.  # noqa: E501
        :type: object
        """
        if skin is None:
            raise ValueError("Invalid value for `skin`, must not be `None`")  # noqa: E501

        self._skin = skin

    @property
    def x(self):
        """Gets the x of this MapSchema.  # noqa: E501

        Position X of the map.  # noqa: E501

        :return: The x of this MapSchema.  # noqa: E501
        :rtype: object
        """
        return self._x

    @x.setter
    def x(self, x):
        """Sets the x of this MapSchema.

        Position X of the map.  # noqa: E501

        :param x: The x of this MapSchema.  # noqa: E501
        :type: object
        """
        if x is None:
            raise ValueError("Invalid value for `x`, must not be `None`")  # noqa: E501

        self._x = x

    @property
    def y(self):
        """Gets the y of this MapSchema.  # noqa: E501

        Position Y of the map.  # noqa: E501

        :return: The y of this MapSchema.  # noqa: E501
        :rtype: object
        """
        return self._y

    @y.setter
    def y(self, y):
        """Sets the y of this MapSchema.

        Position Y of the map.  # noqa: E501

        :param y: The y of this MapSchema.  # noqa: E501
        :type: object
        """
        if y is None:
            raise ValueError("Invalid value for `y`, must not be `None`")  # noqa: E501

        self._y = y

    @property
    def content(self):
        """Gets the content of this MapSchema.  # noqa: E501

        Content of the map.  # noqa: E501

        :return: The content of this MapSchema.  # noqa: E501
        :rtype: object
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this MapSchema.

        Content of the map.  # noqa: E501

        :param content: The content of this MapSchema.  # noqa: E501
        :type: object
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")  # noqa: E501

        self._content = content

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MapSchema, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MapSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
