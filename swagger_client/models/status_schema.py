# coding: utf-8

"""
    Artifacts API

     Artifacts is an API-based MMO game where you can manage 5 characters to explore, fight, gather resources, craft items and much more.  Website: https://artifactsmmo.com/  Documentation: https://docs.artifactsmmo.com/  OpenAPI Spec: https://api.artifactsmmo.com/openapi.json   # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StatusSchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'object',
        'version': 'object',
        'max_level': 'object',
        'characters_online': 'object',
        'server_time': 'object',
        'announcements': 'object',
        'last_wipe': 'object',
        'next_wipe': 'object'
    }

    attribute_map = {
        'status': 'status',
        'version': 'version',
        'max_level': 'max_level',
        'characters_online': 'characters_online',
        'server_time': 'server_time',
        'announcements': 'announcements',
        'last_wipe': 'last_wipe',
        'next_wipe': 'next_wipe'
    }

    def __init__(self, status=None, version=None, max_level=None, characters_online=None, server_time=None, announcements=None, last_wipe=None, next_wipe=None):  # noqa: E501
        """StatusSchema - a model defined in Swagger"""  # noqa: E501
        self._status = None
        self._version = None
        self._max_level = None
        self._characters_online = None
        self._server_time = None
        self._announcements = None
        self._last_wipe = None
        self._next_wipe = None
        self.discriminator = None
        self.status = status
        if version is not None:
            self.version = version
        self.max_level = max_level
        self.characters_online = characters_online
        self.server_time = server_time
        self.announcements = announcements
        self.last_wipe = last_wipe
        self.next_wipe = next_wipe

    @property
    def status(self):
        """Gets the status of this StatusSchema.  # noqa: E501

        Server status  # noqa: E501

        :return: The status of this StatusSchema.  # noqa: E501
        :rtype: object
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this StatusSchema.

        Server status  # noqa: E501

        :param status: The status of this StatusSchema.  # noqa: E501
        :type: object
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def version(self):
        """Gets the version of this StatusSchema.  # noqa: E501


        :return: The version of this StatusSchema.  # noqa: E501
        :rtype: object
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this StatusSchema.


        :param version: The version of this StatusSchema.  # noqa: E501
        :type: object
        """

        self._version = version

    @property
    def max_level(self):
        """Gets the max_level of this StatusSchema.  # noqa: E501

        Maximum level.  # noqa: E501

        :return: The max_level of this StatusSchema.  # noqa: E501
        :rtype: object
        """
        return self._max_level

    @max_level.setter
    def max_level(self, max_level):
        """Sets the max_level of this StatusSchema.

        Maximum level.  # noqa: E501

        :param max_level: The max_level of this StatusSchema.  # noqa: E501
        :type: object
        """
        if max_level is None:
            raise ValueError("Invalid value for `max_level`, must not be `None`")  # noqa: E501

        self._max_level = max_level

    @property
    def characters_online(self):
        """Gets the characters_online of this StatusSchema.  # noqa: E501

        Characters online.  # noqa: E501

        :return: The characters_online of this StatusSchema.  # noqa: E501
        :rtype: object
        """
        return self._characters_online

    @characters_online.setter
    def characters_online(self, characters_online):
        """Sets the characters_online of this StatusSchema.

        Characters online.  # noqa: E501

        :param characters_online: The characters_online of this StatusSchema.  # noqa: E501
        :type: object
        """
        if characters_online is None:
            raise ValueError("Invalid value for `characters_online`, must not be `None`")  # noqa: E501

        self._characters_online = characters_online

    @property
    def server_time(self):
        """Gets the server_time of this StatusSchema.  # noqa: E501

        Server time.  # noqa: E501

        :return: The server_time of this StatusSchema.  # noqa: E501
        :rtype: object
        """
        return self._server_time

    @server_time.setter
    def server_time(self, server_time):
        """Sets the server_time of this StatusSchema.

        Server time.  # noqa: E501

        :param server_time: The server_time of this StatusSchema.  # noqa: E501
        :type: object
        """
        if server_time is None:
            raise ValueError("Invalid value for `server_time`, must not be `None`")  # noqa: E501

        self._server_time = server_time

    @property
    def announcements(self):
        """Gets the announcements of this StatusSchema.  # noqa: E501

        Server announcements.  # noqa: E501

        :return: The announcements of this StatusSchema.  # noqa: E501
        :rtype: object
        """
        return self._announcements

    @announcements.setter
    def announcements(self, announcements):
        """Sets the announcements of this StatusSchema.

        Server announcements.  # noqa: E501

        :param announcements: The announcements of this StatusSchema.  # noqa: E501
        :type: object
        """
        if announcements is None:
            raise ValueError("Invalid value for `announcements`, must not be `None`")  # noqa: E501

        self._announcements = announcements

    @property
    def last_wipe(self):
        """Gets the last_wipe of this StatusSchema.  # noqa: E501

        Last server wipe.  # noqa: E501

        :return: The last_wipe of this StatusSchema.  # noqa: E501
        :rtype: object
        """
        return self._last_wipe

    @last_wipe.setter
    def last_wipe(self, last_wipe):
        """Sets the last_wipe of this StatusSchema.

        Last server wipe.  # noqa: E501

        :param last_wipe: The last_wipe of this StatusSchema.  # noqa: E501
        :type: object
        """
        if last_wipe is None:
            raise ValueError("Invalid value for `last_wipe`, must not be `None`")  # noqa: E501

        self._last_wipe = last_wipe

    @property
    def next_wipe(self):
        """Gets the next_wipe of this StatusSchema.  # noqa: E501

        Next server wipe.  # noqa: E501

        :return: The next_wipe of this StatusSchema.  # noqa: E501
        :rtype: object
        """
        return self._next_wipe

    @next_wipe.setter
    def next_wipe(self, next_wipe):
        """Sets the next_wipe of this StatusSchema.

        Next server wipe.  # noqa: E501

        :param next_wipe: The next_wipe of this StatusSchema.  # noqa: E501
        :type: object
        """
        if next_wipe is None:
            raise ValueError("Invalid value for `next_wipe`, must not be `None`")  # noqa: E501

        self._next_wipe = next_wipe

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StatusSchema, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatusSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
