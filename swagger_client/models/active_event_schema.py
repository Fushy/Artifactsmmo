# coding: utf-8

"""
    Artifacts API

     Artifacts is an API-based MMO game where you can manage 5 characters to explore, fight, gather resources, craft items and much more.  Website: https://artifactsmmo.com/  Documentation: https://docs.artifactsmmo.com/  OpenAPI Spec: https://api.artifactsmmo.com/openapi.json   # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ActiveEventSchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'object',
        'map': 'object',
        'previous_skin': 'object',
        'duration': 'object',
        'expiration': 'object',
        'created_at': 'object'
    }

    attribute_map = {
        'name': 'name',
        'map': 'map',
        'previous_skin': 'previous_skin',
        'duration': 'duration',
        'expiration': 'expiration',
        'created_at': 'created_at'
    }

    def __init__(self, name=None, map=None, previous_skin=None, duration=None, expiration=None, created_at=None):  # noqa: E501
        """ActiveEventSchema - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._map = None
        self._previous_skin = None
        self._duration = None
        self._expiration = None
        self._created_at = None
        self.discriminator = None
        self.name = name
        self.map = map
        self.previous_skin = previous_skin
        self.duration = duration
        self.expiration = expiration
        self.created_at = created_at

    @property
    def name(self):
        """Gets the name of this ActiveEventSchema.  # noqa: E501

        Name of the event.  # noqa: E501

        :return: The name of this ActiveEventSchema.  # noqa: E501
        :rtype: object
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ActiveEventSchema.

        Name of the event.  # noqa: E501

        :param name: The name of this ActiveEventSchema.  # noqa: E501
        :type: object
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def map(self):
        """Gets the map of this ActiveEventSchema.  # noqa: E501

        Map of the event.  # noqa: E501

        :return: The map of this ActiveEventSchema.  # noqa: E501
        :rtype: object
        """
        return self._map

    @map.setter
    def map(self, map):
        """Sets the map of this ActiveEventSchema.

        Map of the event.  # noqa: E501

        :param map: The map of this ActiveEventSchema.  # noqa: E501
        :type: object
        """
        if map is None:
            raise ValueError("Invalid value for `map`, must not be `None`")  # noqa: E501

        self._map = map

    @property
    def previous_skin(self):
        """Gets the previous_skin of this ActiveEventSchema.  # noqa: E501

        Previous map skin.  # noqa: E501

        :return: The previous_skin of this ActiveEventSchema.  # noqa: E501
        :rtype: object
        """
        return self._previous_skin

    @previous_skin.setter
    def previous_skin(self, previous_skin):
        """Sets the previous_skin of this ActiveEventSchema.

        Previous map skin.  # noqa: E501

        :param previous_skin: The previous_skin of this ActiveEventSchema.  # noqa: E501
        :type: object
        """
        if previous_skin is None:
            raise ValueError("Invalid value for `previous_skin`, must not be `None`")  # noqa: E501

        self._previous_skin = previous_skin

    @property
    def duration(self):
        """Gets the duration of this ActiveEventSchema.  # noqa: E501

        Duration in minutes.  # noqa: E501

        :return: The duration of this ActiveEventSchema.  # noqa: E501
        :rtype: object
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this ActiveEventSchema.

        Duration in minutes.  # noqa: E501

        :param duration: The duration of this ActiveEventSchema.  # noqa: E501
        :type: object
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")  # noqa: E501

        self._duration = duration

    @property
    def expiration(self):
        """Gets the expiration of this ActiveEventSchema.  # noqa: E501

        Expiration datetime.  # noqa: E501

        :return: The expiration of this ActiveEventSchema.  # noqa: E501
        :rtype: object
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration):
        """Sets the expiration of this ActiveEventSchema.

        Expiration datetime.  # noqa: E501

        :param expiration: The expiration of this ActiveEventSchema.  # noqa: E501
        :type: object
        """
        if expiration is None:
            raise ValueError("Invalid value for `expiration`, must not be `None`")  # noqa: E501

        self._expiration = expiration

    @property
    def created_at(self):
        """Gets the created_at of this ActiveEventSchema.  # noqa: E501

        Start datetime.  # noqa: E501

        :return: The created_at of this ActiveEventSchema.  # noqa: E501
        :rtype: object
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ActiveEventSchema.

        Start datetime.  # noqa: E501

        :param created_at: The created_at of this ActiveEventSchema.  # noqa: E501
        :type: object
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ActiveEventSchema, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActiveEventSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
